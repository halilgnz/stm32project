
final4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000156c  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a4c  08006a4c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006a4c  08006a4c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a4c  08006a4c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000080  08006ad4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08006ad4  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d563  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe7  00000000  00000000  0002d60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0002f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00030460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018afc  00000000  00000000  000311e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b19  00000000  00000000  00049ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feeb  00000000  00000000  0005a7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea6e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004290  00000000  00000000  000ea738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080054c8 	.word	0x080054c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080054c8 	.word	0x080054c8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__aeabi_f2uiz>:
 8000e88:	0042      	lsls	r2, r0, #1
 8000e8a:	d20e      	bcs.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e90:	d30b      	bcc.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e92:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e9a:	d409      	bmi.n	8000eb0 <__aeabi_f2uiz+0x28>
 8000e9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ea4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0000 	mov.w	r0, #0
 8000eae:	4770      	bx	lr
 8000eb0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000eb4:	d101      	bne.n	8000eba <__aeabi_f2uiz+0x32>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d102      	bne.n	8000ec0 <__aeabi_f2uiz+0x38>
 8000eba:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebe:	4770      	bx	lr
 8000ec0:	f04f 0000 	mov.w	r0, #0
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <microDelay>:
uint8_t TFI = 0;
uint8_t TFD = 0;
char strCopy[15];

void microDelay (uint16_t delay)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <microDelay+0x2c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000eda:	bf00      	nop
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <microDelay+0x2c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3f9      	bcc.n	8000edc <microDelay+0x14>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	20000150 	.word	0x20000150

08000ef8 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f12:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	482c      	ldr	r0, [pc, #176]	; (8000fd8 <DHT11_Start+0xe0>)
 8000f26:	f001 feb3 	bl	8002c90 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f30:	4829      	ldr	r0, [pc, #164]	; (8000fd8 <DHT11_Start+0xe0>)
 8000f32:	f002 f848 	bl	8002fc6 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000f36:	2014      	movs	r0, #20
 8000f38:	f001 f94a 	bl	80021d0 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f42:	4825      	ldr	r0, [pc, #148]	; (8000fd8 <DHT11_Start+0xe0>)
 8000f44:	f002 f83f 	bl	8002fc6 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000f48:	201e      	movs	r0, #30
 8000f4a:	f7ff ffbd 	bl	8000ec8 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <DHT11_Start+0xe0>)
 8000f5c:	f001 fe98 	bl	8002c90 <HAL_GPIO_Init>
  microDelay (40);
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f7ff ffb1 	bl	8000ec8 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6a:	481b      	ldr	r0, [pc, #108]	; (8000fd8 <DHT11_Start+0xe0>)
 8000f6c:	f002 f814 	bl	8002f98 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <DHT11_Start+0x98>
  {
    microDelay (80);
 8000f76:	2050      	movs	r0, #80	; 0x50
 8000f78:	f7ff ffa6 	bl	8000ec8 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f80:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <DHT11_Start+0xe0>)
 8000f82:	f002 f809 	bl	8002f98 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <DHT11_Start+0x98>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000f90:	f001 f914 	bl	80021bc <HAL_GetTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <DHT11_Start+0xe4>)
 8000f98:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000f9a:	f001 f90f 	bl	80021bc <HAL_GetTick>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <DHT11_Start+0xe8>)
 8000fa2:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fa4:	e004      	b.n	8000fb0 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8000fa6:	f001 f909 	bl	80021bc <HAL_GetTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <DHT11_Start+0xe8>)
 8000fae:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <DHT11_Start+0xe0>)
 8000fb6:	f001 ffef 	bl	8002f98 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <DHT11_Start+0xd6>
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <DHT11_Start+0xe4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	1c9a      	adds	r2, r3, #2
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <DHT11_Start+0xe8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d8eb      	bhi.n	8000fa6 <DHT11_Start+0xae>
  }
  return Response;
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	2000019c 	.word	0x2000019c
 8000fe0:	200001c0 	.word	0x200001c0

08000fe4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e066      	b.n	80010be <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000ff0:	f001 f8e4 	bl	80021bc <HAL_GetTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a36      	ldr	r2, [pc, #216]	; (80010d0 <DHT11_Read+0xec>)
 8000ff8:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000ffa:	f001 f8df 	bl	80021bc <HAL_GetTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a34      	ldr	r2, [pc, #208]	; (80010d4 <DHT11_Read+0xf0>)
 8001002:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001004:	e004      	b.n	8001010 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001006:	f001 f8d9 	bl	80021bc <HAL_GetTick>
 800100a:	4603      	mov	r3, r0
 800100c:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <DHT11_Read+0xf0>)
 800100e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001014:	4830      	ldr	r0, [pc, #192]	; (80010d8 <DHT11_Read+0xf4>)
 8001016:	f001 ffbf 	bl	8002f98 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d106      	bne.n	800102e <DHT11_Read+0x4a>
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <DHT11_Read+0xec>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	1c9a      	adds	r2, r3, #2
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <DHT11_Read+0xf0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d8eb      	bhi.n	8001006 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800102e:	2028      	movs	r0, #40	; 0x28
 8001030:	f7ff ff4a 	bl	8000ec8 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001038:	4827      	ldr	r0, [pc, #156]	; (80010d8 <DHT11_Read+0xf4>)
 800103a:	f001 ffad 	bl	8002f98 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10e      	bne.n	8001062 <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2201      	movs	r2, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	b25b      	sxtb	r3, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	b25a      	sxtb	r2, r3
 8001056:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800105a:	4013      	ands	r3, r2
 800105c:	b25b      	sxtb	r3, r3
 800105e:	71bb      	strb	r3, [r7, #6]
 8001060:	e00b      	b.n	800107a <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f1c3 0307 	rsb	r3, r3, #7
 8001068:	2201      	movs	r2, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	b25a      	sxtb	r2, r3
 8001070:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001074:	4313      	orrs	r3, r2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800107a:	f001 f89f 	bl	80021bc <HAL_GetTick>
 800107e:	4603      	mov	r3, r0
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <DHT11_Read+0xec>)
 8001082:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001084:	f001 f89a 	bl	80021bc <HAL_GetTick>
 8001088:	4603      	mov	r3, r0
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <DHT11_Read+0xf0>)
 800108c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800108e:	e004      	b.n	800109a <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001090:	f001 f894 	bl	80021bc <HAL_GetTick>
 8001094:	4603      	mov	r3, r0
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <DHT11_Read+0xf0>)
 8001098:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800109a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109e:	480e      	ldr	r0, [pc, #56]	; (80010d8 <DHT11_Read+0xf4>)
 80010a0:	f001 ff7a 	bl	8002f98 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <DHT11_Read+0xd4>
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <DHT11_Read+0xec>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1c9a      	adds	r2, r3, #2
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <DHT11_Read+0xf0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8eb      	bhi.n	8001090 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	3301      	adds	r3, #1
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d995      	bls.n	8000ff0 <DHT11_Read+0xc>
    }
  }
  return b;
 80010c4:	79bb      	ldrb	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000019c 	.word	0x2000019c
 80010d4:	200001c0 	.word	0x200001c0
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	00000000 	.word	0x00000000

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b598      	push	{r3, r4, r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f001 f812 	bl	800210c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 fa0c 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f000 fb5e 	bl	80017ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80010f0:	f000 fade 	bl	80016b0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010f4:	f000 fb0a 	bl	800170c <MX_TIM1_Init>
  MX_ADC1_Init();
 80010f8:	f000 fa5e 	bl	80015b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80010fc:	f000 fa9a 	bl	8001634 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001100:	48b5      	ldr	r0, [pc, #724]	; (80013d8 <main+0x2f8>)
 8001102:	f003 fad1 	bl	80046a8 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110c:	48b3      	ldr	r0, [pc, #716]	; (80013dc <main+0x2fc>)
 800110e:	f001 ff5a 	bl	8002fc6 <HAL_GPIO_WritePin>
    SSD1306_Init();
 8001112:	f000 fbc1 	bl	8001898 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	48af      	ldr	r0, [pc, #700]	; (80013dc <main+0x2fc>)
 800111e:	f001 ff52 	bl	8002fc6 <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001122:	4bad      	ldr	r3, [pc, #692]	; (80013d8 <main+0x2f8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 800112a:	bf00      	nop
 800112c:	4baa      	ldr	r3, [pc, #680]	; (80013d8 <main+0x2f8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	2b09      	cmp	r3, #9
 8001134:	d9fa      	bls.n	800112c <main+0x4c>
	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	48a7      	ldr	r0, [pc, #668]	; (80013dc <main+0x2fc>)
 800113e:	f001 ff42 	bl	8002fc6 <HAL_GPIO_WritePin>

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001142:	f001 f83b 	bl	80021bc <HAL_GetTick>
 8001146:	4603      	mov	r3, r0
 8001148:	4aa5      	ldr	r2, [pc, #660]	; (80013e0 <main+0x300>)
 800114a:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 800114c:	bf00      	nop
 800114e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001152:	48a2      	ldr	r0, [pc, #648]	; (80013dc <main+0x2fc>)
 8001154:	f001 ff20 	bl	8002f98 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d108      	bne.n	8001170 <main+0x90>
 800115e:	4ba0      	ldr	r3, [pc, #640]	; (80013e0 <main+0x300>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f103 040a 	add.w	r4, r3, #10
 8001166:	f001 f829 	bl	80021bc <HAL_GetTick>
 800116a:	4603      	mov	r3, r0
 800116c:	429c      	cmp	r4, r3
 800116e:	d8ee      	bhi.n	800114e <main+0x6e>
	      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001170:	4b99      	ldr	r3, [pc, #612]	; (80013d8 <main+0x2f8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	4a9b      	ldr	r2, [pc, #620]	; (80013e4 <main+0x304>)
 8001178:	6013      	str	r3, [r2, #0]

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800117a:	f001 f81f 	bl	80021bc <HAL_GetTick>
 800117e:	4603      	mov	r3, r0
 8001180:	4a97      	ldr	r2, [pc, #604]	; (80013e0 <main+0x300>)
 8001182:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001184:	bf00      	nop
 8001186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118a:	4894      	ldr	r0, [pc, #592]	; (80013dc <main+0x2fc>)
 800118c:	f001 ff04 	bl	8002f98 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d008      	beq.n	80011a8 <main+0xc8>
 8001196:	4b92      	ldr	r3, [pc, #584]	; (80013e0 <main+0x300>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800119e:	f001 f80d 	bl	80021bc <HAL_GetTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	429c      	cmp	r4, r3
 80011a6:	d8ee      	bhi.n	8001186 <main+0xa6>
	      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80011a8:	4b8b      	ldr	r3, [pc, #556]	; (80013d8 <main+0x2f8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	4a8e      	ldr	r2, [pc, #568]	; (80013e8 <main+0x308>)
 80011b0:	6013      	str	r3, [r2, #0]

	      Mesafe = (Value2-Value1)* 0.034/2;
 80011b2:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <main+0x308>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b8b      	ldr	r3, [pc, #556]	; (80013e4 <main+0x304>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f909 	bl	80003d4 <__aeabi_ui2d>
 80011c2:	a383      	add	r3, pc, #524	; (adr r3, 80013d0 <main+0x2f0>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff f97e 	bl	80004c8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011dc:	f7ff fa9e 	bl	800071c <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fb80 	bl	80008ec <__aeabi_d2uiz>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b7e      	ldr	r3, [pc, #504]	; (80013ec <main+0x30c>)
 80011f2:	801a      	strh	r2, [r3, #0]

	      SSD1306_GotoXY (63, 0);
 80011f4:	2100      	movs	r1, #0
 80011f6:	203f      	movs	r0, #63	; 0x3f
 80011f8:	f000 fcb6 	bl	8001b68 <SSD1306_GotoXY>
	      SSD1306_Puts ("Mesafe cm:", &Font_7x10, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	497c      	ldr	r1, [pc, #496]	; (80013f0 <main+0x310>)
 8001200:	487c      	ldr	r0, [pc, #496]	; (80013f4 <main+0x314>)
 8001202:	f000 fd47 	bl	8001c94 <SSD1306_Puts>
	      sprintf(strCopy,"%d    ", Mesafe);
 8001206:	4b79      	ldr	r3, [pc, #484]	; (80013ec <main+0x30c>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	497a      	ldr	r1, [pc, #488]	; (80013f8 <main+0x318>)
 800120e:	487b      	ldr	r0, [pc, #492]	; (80013fc <main+0x31c>)
 8001210:	f003 fce0 	bl	8004bd4 <siprintf>
	      SSD1306_GotoXY (75, 30);
 8001214:	211e      	movs	r1, #30
 8001216:	204b      	movs	r0, #75	; 0x4b
 8001218:	f000 fca6 	bl	8001b68 <SSD1306_GotoXY>
	      SSD1306_Puts (strCopy, &Font_11x18, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	4978      	ldr	r1, [pc, #480]	; (8001400 <main+0x320>)
 8001220:	4876      	ldr	r0, [pc, #472]	; (80013fc <main+0x31c>)
 8001222:	f000 fd37 	bl	8001c94 <SSD1306_Puts>
	      SSD1306_UpdateScreen();
 8001226:	f000 fbfb 	bl	8001a20 <SSD1306_UpdateScreen>
	      HAL_Delay(50);
 800122a:	2032      	movs	r0, #50	; 0x32
 800122c:	f000 ffd0 	bl	80021d0 <HAL_Delay>


     if(DHT11_Start())
 8001230:	f7ff fe62 	bl	8000ef8 <DHT11_Start>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8120 	beq.w	800147c <main+0x39c>
     {
       RHI = DHT11_Read(); // Relative humidity integral
 800123c:	f7ff fed2 	bl	8000fe4 <DHT11_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b6f      	ldr	r3, [pc, #444]	; (8001404 <main+0x324>)
 8001246:	701a      	strb	r2, [r3, #0]
       RHD = DHT11_Read(); // Relative humidity decimal
 8001248:	f7ff fecc 	bl	8000fe4 <DHT11_Read>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <main+0x328>)
 8001252:	701a      	strb	r2, [r3, #0]
       TCI = DHT11_Read(); // Celsius integral
 8001254:	f7ff fec6 	bl	8000fe4 <DHT11_Read>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b6b      	ldr	r3, [pc, #428]	; (800140c <main+0x32c>)
 800125e:	701a      	strb	r2, [r3, #0]
       TCD = DHT11_Read(); // Celsius decimal
 8001260:	f7ff fec0 	bl	8000fe4 <DHT11_Read>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b69      	ldr	r3, [pc, #420]	; (8001410 <main+0x330>)
 800126a:	701a      	strb	r2, [r3, #0]
       SUM = DHT11_Read(); // Check sum
 800126c:	f7ff feba 	bl	8000fe4 <DHT11_Read>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b67      	ldr	r3, [pc, #412]	; (8001414 <main+0x334>)
 8001276:	701a      	strb	r2, [r3, #0]
       if (RHI + RHD + TCI + TCD == SUM)
 8001278:	4b62      	ldr	r3, [pc, #392]	; (8001404 <main+0x324>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b62      	ldr	r3, [pc, #392]	; (8001408 <main+0x328>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a61      	ldr	r2, [pc, #388]	; (800140c <main+0x32c>)
 8001286:	7812      	ldrb	r2, [r2, #0]
 8001288:	4413      	add	r3, r2
 800128a:	4a61      	ldr	r2, [pc, #388]	; (8001410 <main+0x330>)
 800128c:	7812      	ldrb	r2, [r2, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a60      	ldr	r2, [pc, #384]	; (8001414 <main+0x334>)
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	4293      	cmp	r3, r2
 8001296:	f040 80f1 	bne.w	800147c <main+0x39c>
       {
         // Can use RHI and TCI for any purposes if whole number only needed
         tCelsius = (float)TCI + (float)(TCD/10.0);
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <main+0x32c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fc4a 	bl	8000b38 <__aeabi_ui2f>
 80012a4:	4604      	mov	r4, r0
 80012a6:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <main+0x330>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8a2 	bl	80003f4 <__aeabi_i2d>
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b58      	ldr	r3, [pc, #352]	; (8001418 <main+0x338>)
 80012b6:	f7ff fa31 	bl	800071c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fb33 	bl	800092c <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff fb84 	bl	80009d8 <__addsf3>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b51      	ldr	r3, [pc, #324]	; (800141c <main+0x33c>)
 80012d6:	601a      	str	r2, [r3, #0]
         tFahrenheit = tCelsius * 9/5 + 32;
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <main+0x33c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4950      	ldr	r1, [pc, #320]	; (8001420 <main+0x340>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fc82 	bl	8000be8 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	494f      	ldr	r1, [pc, #316]	; (8001424 <main+0x344>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fd31 	bl	8000d50 <__aeabi_fdiv>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fb6f 	bl	80009d8 <__addsf3>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <main+0x348>)
 8001300:	601a      	str	r2, [r3, #0]
         RH = (float)RHI + (float)(RHD/10.0);
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <main+0x324>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fc16 	bl	8000b38 <__aeabi_ui2f>
 800130c:	4604      	mov	r4, r0
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <main+0x328>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f86e 	bl	80003f4 <__aeabi_i2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <main+0x338>)
 800131e:	f7ff f9fd 	bl	800071c <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff faff 	bl	800092c <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	4619      	mov	r1, r3
 8001332:	4620      	mov	r0, r4
 8001334:	f7ff fb50 	bl	80009d8 <__addsf3>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b3b      	ldr	r3, [pc, #236]	; (800142c <main+0x34c>)
 800133e:	601a      	str	r2, [r3, #0]
         // Can use tCelsius, tFahrenheit and RH for any purposes
         TFI = tFahrenheit;  // Fahrenheit integral
 8001340:	4b39      	ldr	r3, [pc, #228]	; (8001428 <main+0x348>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fd9f 	bl	8000e88 <__aeabi_f2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <main+0x350>)
 8001350:	701a      	strb	r2, [r3, #0]
         TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8001352:	4b35      	ldr	r3, [pc, #212]	; (8001428 <main+0x348>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4937      	ldr	r1, [pc, #220]	; (8001434 <main+0x354>)
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc45 	bl	8000be8 <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	461c      	mov	r4, r3
 8001362:	4b33      	ldr	r3, [pc, #204]	; (8001430 <main+0x350>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fbe5 	bl	8000b40 <__aeabi_i2f>
 8001376:	4603      	mov	r3, r0
 8001378:	4619      	mov	r1, r3
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff fb2a 	bl	80009d4 <__aeabi_fsub>
 8001380:	4603      	mov	r3, r0
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fd80 	bl	8000e88 <__aeabi_f2uiz>
 8001388:	4603      	mov	r3, r0
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <main+0x358>)
 800138e:	701a      	strb	r2, [r3, #0]
         sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <main+0x32c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <main+0x330>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	4928      	ldr	r1, [pc, #160]	; (800143c <main+0x35c>)
 800139c:	4817      	ldr	r0, [pc, #92]	; (80013fc <main+0x31c>)
 800139e:	f003 fc19 	bl	8004bd4 <siprintf>
         SSD1306_GotoXY (0, 0);
 80013a2:	2100      	movs	r1, #0
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 fbdf 	bl	8001b68 <SSD1306_GotoXY>
         SSD1306_Puts (strCopy, &Font_7x10, 1);
 80013aa:	2201      	movs	r2, #1
 80013ac:	4910      	ldr	r1, [pc, #64]	; (80013f0 <main+0x310>)
 80013ae:	4813      	ldr	r0, [pc, #76]	; (80013fc <main+0x31c>)
 80013b0:	f000 fc70 	bl	8001c94 <SSD1306_Puts>
         sprintf(strCopy,"%d.%d F   ", TFI, TFD);
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <main+0x350>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <main+0x358>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4920      	ldr	r1, [pc, #128]	; (8001440 <main+0x360>)
 80013c0:	480e      	ldr	r0, [pc, #56]	; (80013fc <main+0x31c>)
 80013c2:	f003 fc07 	bl	8004bd4 <siprintf>
         SSD1306_GotoXY (0, 20);
 80013c6:	2114      	movs	r1, #20
 80013c8:	e03c      	b.n	8001444 <main+0x364>
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	b020c49c 	.word	0xb020c49c
 80013d4:	3fa16872 	.word	0x3fa16872
 80013d8:	20000150 	.word	0x20000150
 80013dc:	40010800 	.word	0x40010800
 80013e0:	2000019c 	.word	0x2000019c
 80013e4:	200001a0 	.word	0x200001a0
 80013e8:	200001a4 	.word	0x200001a4
 80013ec:	200001a8 	.word	0x200001a8
 80013f0:	20000000 	.word	0x20000000
 80013f4:	080054e0 	.word	0x080054e0
 80013f8:	080054ec 	.word	0x080054ec
 80013fc:	200001ac 	.word	0x200001ac
 8001400:	20000008 	.word	0x20000008
 8001404:	200001bb 	.word	0x200001bb
 8001408:	200001bc 	.word	0x200001bc
 800140c:	200001bd 	.word	0x200001bd
 8001410:	200001be 	.word	0x200001be
 8001414:	200001bf 	.word	0x200001bf
 8001418:	40240000 	.word	0x40240000
 800141c:	200001c4 	.word	0x200001c4
 8001420:	41100000 	.word	0x41100000
 8001424:	40a00000 	.word	0x40a00000
 8001428:	200001c8 	.word	0x200001c8
 800142c:	200001cc 	.word	0x200001cc
 8001430:	200001d0 	.word	0x200001d0
 8001434:	41200000 	.word	0x41200000
 8001438:	200001d1 	.word	0x200001d1
 800143c:	080054f4 	.word	0x080054f4
 8001440:	08005500 	.word	0x08005500
 8001444:	2000      	movs	r0, #0
 8001446:	f000 fb8f 	bl	8001b68 <SSD1306_GotoXY>
         SSD1306_Puts (strCopy, &Font_7x10,  1);
 800144a:	2201      	movs	r2, #1
 800144c:	4924      	ldr	r1, [pc, #144]	; (80014e0 <main+0x400>)
 800144e:	4825      	ldr	r0, [pc, #148]	; (80014e4 <main+0x404>)
 8001450:	f000 fc20 	bl	8001c94 <SSD1306_Puts>
         sprintf(strCopy,"%d.%d %%  ", RHI, RHD);
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <main+0x408>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <main+0x40c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4924      	ldr	r1, [pc, #144]	; (80014f0 <main+0x410>)
 8001460:	4820      	ldr	r0, [pc, #128]	; (80014e4 <main+0x404>)
 8001462:	f003 fbb7 	bl	8004bd4 <siprintf>
         SSD1306_GotoXY (0, 40);
 8001466:	2128      	movs	r1, #40	; 0x28
 8001468:	2000      	movs	r0, #0
 800146a:	f000 fb7d 	bl	8001b68 <SSD1306_GotoXY>
         SSD1306_Puts (strCopy, &Font_7x10, 1);
 800146e:	2201      	movs	r2, #1
 8001470:	491b      	ldr	r1, [pc, #108]	; (80014e0 <main+0x400>)
 8001472:	481c      	ldr	r0, [pc, #112]	; (80014e4 <main+0x404>)
 8001474:	f000 fc0e 	bl	8001c94 <SSD1306_Puts>
         SSD1306_UpdateScreen();
 8001478:	f000 fad2 	bl	8001a20 <SSD1306_UpdateScreen>
       }
     }
     HAL_Delay(2000);
 800147c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001480:	f000 fea6 	bl	80021d0 <HAL_Delay>

     HAL_ADC_Start(&hadc1);
 8001484:	481b      	ldr	r0, [pc, #108]	; (80014f4 <main+0x414>)
 8001486:	f000 ff9f 	bl	80023c8 <HAL_ADC_Start>
         HAL_ADC_PollForConversion(&hadc1,1000);
 800148a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800148e:	4819      	ldr	r0, [pc, #100]	; (80014f4 <main+0x414>)
 8001490:	f001 f874 	bl	800257c <HAL_ADC_PollForConversion>
         readValue1 = HAL_ADC_GetValue(&hadc1);
 8001494:	4817      	ldr	r0, [pc, #92]	; (80014f4 <main+0x414>)
 8001496:	f001 f977 	bl	8002788 <HAL_ADC_GetValue>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <main+0x418>)
 80014a0:	801a      	strh	r2, [r3, #0]
         HAL_ADC_Stop(&hadc1);
 80014a2:	4814      	ldr	r0, [pc, #80]	; (80014f4 <main+0x414>)
 80014a4:	f001 f83e 	bl	8002524 <HAL_ADC_Stop>
         HAL_Delay(1000);
 80014a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ac:	f000 fe90 	bl	80021d0 <HAL_Delay>

         HAL_ADC_Start(&hadc2);
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <main+0x41c>)
 80014b2:	f000 ff89 	bl	80023c8 <HAL_ADC_Start>
                 HAL_ADC_PollForConversion(&hadc2,1000);
 80014b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014ba:	4810      	ldr	r0, [pc, #64]	; (80014fc <main+0x41c>)
 80014bc:	f001 f85e 	bl	800257c <HAL_ADC_PollForConversion>
                 readValue2 = HAL_ADC_GetValue(&hadc2);
 80014c0:	480e      	ldr	r0, [pc, #56]	; (80014fc <main+0x41c>)
 80014c2:	f001 f961 	bl	8002788 <HAL_ADC_GetValue>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <main+0x420>)
 80014cc:	801a      	strh	r2, [r3, #0]
                 HAL_ADC_Stop(&hadc2);
 80014ce:	480b      	ldr	r0, [pc, #44]	; (80014fc <main+0x41c>)
 80014d0:	f001 f828 	bl	8002524 <HAL_ADC_Stop>
                 HAL_Delay(1000);
 80014d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d8:	f000 fe7a 	bl	80021d0 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80014dc:	e61b      	b.n	8001116 <main+0x36>
 80014de:	bf00      	nop
 80014e0:	20000000 	.word	0x20000000
 80014e4:	200001ac 	.word	0x200001ac
 80014e8:	200001bb 	.word	0x200001bb
 80014ec:	200001bc 	.word	0x200001bc
 80014f0:	0800550c 	.word	0x0800550c
 80014f4:	2000009c 	.word	0x2000009c
 80014f8:	20000198 	.word	0x20000198
 80014fc:	200000cc 	.word	0x200000cc
 8001500:	2000019a 	.word	0x2000019a

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150e:	2228      	movs	r2, #40	; 0x28
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fb56 	bl	8004bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	2301      	movs	r3, #1
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001550:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001554:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fac4 	bl	8003ae8 <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001566:	f000 f991 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2102      	movs	r1, #2
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fd30 	bl	8003fec <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001592:	f000 f97b 	bl	800188c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001596:	2302      	movs	r3, #2
 8001598:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 febb 	bl	800431c <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80015ac:	f000 f96e 	bl	800188c <Error_Handler>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3750      	adds	r7, #80	; 0x50
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_ADC1_Init+0x74>)
 80015ca:	4a19      	ldr	r2, [pc, #100]	; (8001630 <MX_ADC1_Init+0x78>)
 80015cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_ADC1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_ADC1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_ADC1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_ADC1_Init+0x74>)
 80015e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_ADC1_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_ADC1_Init+0x74>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_ADC1_Init+0x74>)
 80015f6:	f000 fe0f 	bl	8002218 <HAL_ADC_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001600:	f000 f944 	bl	800188c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001608:	2301      	movs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_ADC1_Init+0x74>)
 8001616:	f001 f8c3 	bl	80027a0 <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001620:	f000 f934 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000009c 	.word	0x2000009c
 8001630:	40012400 	.word	0x40012400

08001634 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_ADC2_Init+0x74>)
 8001646:	4a19      	ldr	r2, [pc, #100]	; (80016ac <MX_ADC2_Init+0x78>)
 8001648:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <MX_ADC2_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <MX_ADC2_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_ADC2_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_ADC2_Init+0x74>)
 800165e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001662:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_ADC2_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_ADC2_Init+0x74>)
 800166c:	2201      	movs	r2, #1
 800166e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_ADC2_Init+0x74>)
 8001672:	f000 fdd1 	bl	8002218 <HAL_ADC_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800167c:	f000 f906 	bl	800188c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001680:	2301      	movs	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001684:	2301      	movs	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_ADC2_Init+0x74>)
 8001692:	f001 f885 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800169c:	f000 f8f6 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200000cc 	.word	0x200000cc
 80016ac:	40012800 	.word	0x40012800

080016b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f001 fc83 	bl	8002ff8 <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f000 f8c8 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200000fc 	.word	0x200000fc
 8001704:	40005400 	.word	0x40005400
 8001708:	00061a80 	.word	0x00061a80

0800170c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_TIM1_Init+0x98>)
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <MX_TIM1_Init+0x9c>)
 800172c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001730:	2247      	movs	r2, #71	; 0x47
 8001732:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_TIM1_Init+0x98>)
 800173c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001740:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_TIM1_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001754:	4813      	ldr	r0, [pc, #76]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001756:	f002 ff57 	bl	8004608 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001760:	f000 f894 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_TIM1_Init+0x98>)
 8001772:	f002 ffe3 	bl	800473c <HAL_TIM_ConfigClockSource>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800177c:	f000 f886 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_TIM1_Init+0x98>)
 800178e:	f003 f991 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001798:	f000 f878 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000150 	.word	0x20000150
 80017a8:	40012c00 	.word	0x40012c00

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <MX_GPIO_Init+0xd4>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a2e      	ldr	r2, [pc, #184]	; (8001880 <MX_GPIO_Init+0xd4>)
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <MX_GPIO_Init+0xd4>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <MX_GPIO_Init+0xd4>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a28      	ldr	r2, [pc, #160]	; (8001880 <MX_GPIO_Init+0xd4>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <MX_GPIO_Init+0xd4>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <MX_GPIO_Init+0xd4>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a22      	ldr	r2, [pc, #136]	; (8001880 <MX_GPIO_Init+0xd4>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <MX_GPIO_Init+0xd4>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180e:	481d      	ldr	r0, [pc, #116]	; (8001884 <MX_GPIO_Init+0xd8>)
 8001810:	f001 fbd9 	bl	8002fc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800181a:	481b      	ldr	r0, [pc, #108]	; (8001888 <MX_GPIO_Init+0xdc>)
 800181c:	f001 fbd3 	bl	8002fc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	4813      	ldr	r0, [pc, #76]	; (8001884 <MX_GPIO_Init+0xd8>)
 8001836:	f001 fa2b 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800183a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2302      	movs	r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4619      	mov	r1, r3
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <MX_GPIO_Init+0xd8>)
 8001854:	f001 fa1c 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2302      	movs	r3, #2
 8001868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_GPIO_Init+0xdc>)
 8001872:	f001 fa0d 	bl	8002c90 <HAL_GPIO_Init>

}
 8001876:	bf00      	nop
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40010800 	.word	0x40010800
 8001888:	40010c00 	.word	0x40010c00

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800189e:	f000 fa1f 	bl	8001ce0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80018a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80018a6:	2201      	movs	r2, #1
 80018a8:	2178      	movs	r1, #120	; 0x78
 80018aa:	485b      	ldr	r0, [pc, #364]	; (8001a18 <SSD1306_Init+0x180>)
 80018ac:	f001 fde6 	bl	800347c <HAL_I2C_IsDeviceReady>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e0a9      	b.n	8001a0e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80018ba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80018be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018c0:	e002      	b.n	80018c8 <SSD1306_Init+0x30>
		p--;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f9      	bne.n	80018c2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80018ce:	22ae      	movs	r2, #174	; 0xae
 80018d0:	2100      	movs	r1, #0
 80018d2:	2078      	movs	r0, #120	; 0x78
 80018d4:	f000 fa7e 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80018d8:	2220      	movs	r2, #32
 80018da:	2100      	movs	r1, #0
 80018dc:	2078      	movs	r0, #120	; 0x78
 80018de:	f000 fa79 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80018e2:	2210      	movs	r2, #16
 80018e4:	2100      	movs	r1, #0
 80018e6:	2078      	movs	r0, #120	; 0x78
 80018e8:	f000 fa74 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018ec:	22b0      	movs	r2, #176	; 0xb0
 80018ee:	2100      	movs	r1, #0
 80018f0:	2078      	movs	r0, #120	; 0x78
 80018f2:	f000 fa6f 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80018f6:	22c8      	movs	r2, #200	; 0xc8
 80018f8:	2100      	movs	r1, #0
 80018fa:	2078      	movs	r0, #120	; 0x78
 80018fc:	f000 fa6a 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2078      	movs	r0, #120	; 0x78
 8001906:	f000 fa65 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800190a:	2210      	movs	r2, #16
 800190c:	2100      	movs	r1, #0
 800190e:	2078      	movs	r0, #120	; 0x78
 8001910:	f000 fa60 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001914:	2240      	movs	r2, #64	; 0x40
 8001916:	2100      	movs	r1, #0
 8001918:	2078      	movs	r0, #120	; 0x78
 800191a:	f000 fa5b 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800191e:	2281      	movs	r2, #129	; 0x81
 8001920:	2100      	movs	r1, #0
 8001922:	2078      	movs	r0, #120	; 0x78
 8001924:	f000 fa56 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001928:	22ff      	movs	r2, #255	; 0xff
 800192a:	2100      	movs	r1, #0
 800192c:	2078      	movs	r0, #120	; 0x78
 800192e:	f000 fa51 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001932:	22a1      	movs	r2, #161	; 0xa1
 8001934:	2100      	movs	r1, #0
 8001936:	2078      	movs	r0, #120	; 0x78
 8001938:	f000 fa4c 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800193c:	22a6      	movs	r2, #166	; 0xa6
 800193e:	2100      	movs	r1, #0
 8001940:	2078      	movs	r0, #120	; 0x78
 8001942:	f000 fa47 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001946:	22a8      	movs	r2, #168	; 0xa8
 8001948:	2100      	movs	r1, #0
 800194a:	2078      	movs	r0, #120	; 0x78
 800194c:	f000 fa42 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001950:	223f      	movs	r2, #63	; 0x3f
 8001952:	2100      	movs	r1, #0
 8001954:	2078      	movs	r0, #120	; 0x78
 8001956:	f000 fa3d 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800195a:	22a4      	movs	r2, #164	; 0xa4
 800195c:	2100      	movs	r1, #0
 800195e:	2078      	movs	r0, #120	; 0x78
 8001960:	f000 fa38 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001964:	22d3      	movs	r2, #211	; 0xd3
 8001966:	2100      	movs	r1, #0
 8001968:	2078      	movs	r0, #120	; 0x78
 800196a:	f000 fa33 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2078      	movs	r0, #120	; 0x78
 8001974:	f000 fa2e 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001978:	22d5      	movs	r2, #213	; 0xd5
 800197a:	2100      	movs	r1, #0
 800197c:	2078      	movs	r0, #120	; 0x78
 800197e:	f000 fa29 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001982:	22f0      	movs	r2, #240	; 0xf0
 8001984:	2100      	movs	r1, #0
 8001986:	2078      	movs	r0, #120	; 0x78
 8001988:	f000 fa24 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800198c:	22d9      	movs	r2, #217	; 0xd9
 800198e:	2100      	movs	r1, #0
 8001990:	2078      	movs	r0, #120	; 0x78
 8001992:	f000 fa1f 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001996:	2222      	movs	r2, #34	; 0x22
 8001998:	2100      	movs	r1, #0
 800199a:	2078      	movs	r0, #120	; 0x78
 800199c:	f000 fa1a 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80019a0:	22da      	movs	r2, #218	; 0xda
 80019a2:	2100      	movs	r1, #0
 80019a4:	2078      	movs	r0, #120	; 0x78
 80019a6:	f000 fa15 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80019aa:	2212      	movs	r2, #18
 80019ac:	2100      	movs	r1, #0
 80019ae:	2078      	movs	r0, #120	; 0x78
 80019b0:	f000 fa10 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80019b4:	22db      	movs	r2, #219	; 0xdb
 80019b6:	2100      	movs	r1, #0
 80019b8:	2078      	movs	r0, #120	; 0x78
 80019ba:	f000 fa0b 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80019be:	2220      	movs	r2, #32
 80019c0:	2100      	movs	r1, #0
 80019c2:	2078      	movs	r0, #120	; 0x78
 80019c4:	f000 fa06 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80019c8:	228d      	movs	r2, #141	; 0x8d
 80019ca:	2100      	movs	r1, #0
 80019cc:	2078      	movs	r0, #120	; 0x78
 80019ce:	f000 fa01 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80019d2:	2214      	movs	r2, #20
 80019d4:	2100      	movs	r1, #0
 80019d6:	2078      	movs	r0, #120	; 0x78
 80019d8:	f000 f9fc 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80019dc:	22af      	movs	r2, #175	; 0xaf
 80019de:	2100      	movs	r1, #0
 80019e0:	2078      	movs	r0, #120	; 0x78
 80019e2:	f000 f9f7 	bl	8001dd4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80019e6:	222e      	movs	r2, #46	; 0x2e
 80019e8:	2100      	movs	r1, #0
 80019ea:	2078      	movs	r0, #120	; 0x78
 80019ec:	f000 f9f2 	bl	8001dd4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f000 f843 	bl	8001a7c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80019f6:	f000 f813 	bl	8001a20 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <SSD1306_Init+0x184>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <SSD1306_Init+0x184>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SSD1306_Init+0x184>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200000fc 	.word	0x200000fc
 8001a1c:	200005d4 	.word	0x200005d4

08001a20 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e01d      	b.n	8001a68 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	3b50      	subs	r3, #80	; 0x50
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	2100      	movs	r1, #0
 8001a36:	2078      	movs	r0, #120	; 0x78
 8001a38:	f000 f9cc 	bl	8001dd4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2078      	movs	r0, #120	; 0x78
 8001a42:	f000 f9c7 	bl	8001dd4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a46:	2210      	movs	r2, #16
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2078      	movs	r0, #120	; 0x78
 8001a4c:	f000 f9c2 	bl	8001dd4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	01db      	lsls	r3, r3, #7
 8001a54:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <SSD1306_UpdateScreen+0x58>)
 8001a56:	441a      	add	r2, r3
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	2140      	movs	r1, #64	; 0x40
 8001a5c:	2078      	movs	r0, #120	; 0x78
 8001a5e:	f000 f953 	bl	8001d08 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	3301      	adds	r3, #1
 8001a66:	71fb      	strb	r3, [r7, #7]
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2b07      	cmp	r3, #7
 8001a6c:	d9de      	bls.n	8001a2c <SSD1306_UpdateScreen+0xc>
	}
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200001d4 	.word	0x200001d4

08001a7c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <SSD1306_Fill+0x14>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <SSD1306_Fill+0x16>
 8001a90:	23ff      	movs	r3, #255	; 0xff
 8001a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a96:	4619      	mov	r1, r3
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <SSD1306_Fill+0x2c>)
 8001a9a:	f003 f893 	bl	8004bc4 <memset>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200001d4 	.word	0x200001d4

08001aac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	80bb      	strh	r3, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	70fb      	strb	r3, [r7, #3]
	if (
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac2:	d848      	bhi.n	8001b56 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	2b3f      	cmp	r3, #63	; 0x3f
 8001ac8:	d845      	bhi.n	8001b56 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001aca:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <SSD1306_DrawPixel+0xb4>)
 8001acc:	791b      	ldrb	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf0c      	ite	eq
 8001ad8:	2301      	moveq	r3, #1
 8001ada:	2300      	movne	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d11a      	bne.n	8001b1c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
 8001aea:	08db      	lsrs	r3, r3, #3
 8001aec:	b298      	uxth	r0, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	01db      	lsls	r3, r3, #7
 8001af2:	4413      	add	r3, r2
 8001af4:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <SSD1306_DrawPixel+0xb8>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	b25a      	sxtb	r2, r3
 8001afa:	88bb      	ldrh	r3, [r7, #4]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b259      	sxtb	r1, r3
 8001b0c:	88fa      	ldrh	r2, [r7, #6]
 8001b0e:	4603      	mov	r3, r0
 8001b10:	01db      	lsls	r3, r3, #7
 8001b12:	4413      	add	r3, r2
 8001b14:	b2c9      	uxtb	r1, r1
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <SSD1306_DrawPixel+0xb8>)
 8001b18:	54d1      	strb	r1, [r2, r3]
 8001b1a:	e01d      	b.n	8001b58 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b1c:	88fa      	ldrh	r2, [r7, #6]
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	b298      	uxth	r0, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	01db      	lsls	r3, r3, #7
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <SSD1306_DrawPixel+0xb8>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	88bb      	ldrh	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	4013      	ands	r3, r2
 8001b44:	b259      	sxtb	r1, r3
 8001b46:	88fa      	ldrh	r2, [r7, #6]
 8001b48:	4603      	mov	r3, r0
 8001b4a:	01db      	lsls	r3, r3, #7
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b2c9      	uxtb	r1, r1
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <SSD1306_DrawPixel+0xb8>)
 8001b52:	54d1      	strb	r1, [r2, r3]
 8001b54:	e000      	b.n	8001b58 <SSD1306_DrawPixel+0xac>
		return;
 8001b56:	bf00      	nop
	}
}
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	200005d4 	.word	0x200005d4
 8001b64:	200001d4 	.word	0x200001d4

08001b68 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	80fb      	strh	r3, [r7, #6]
 8001b74:	4613      	mov	r3, r2
 8001b76:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b78:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SSD1306_GotoXY+0x28>)
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <SSD1306_GotoXY+0x28>)
 8001b80:	88bb      	ldrh	r3, [r7, #4]
 8001b82:	8053      	strh	r3, [r2, #2]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200005d4 	.word	0x200005d4

08001b94 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ba4:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <SSD1306_Putc+0xfc>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
	if (
 8001bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8001bb2:	dc07      	bgt.n	8001bc4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <SSD1306_Putc+0xfc>)
 8001bb6:	885b      	ldrh	r3, [r3, #2]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001bc0:	2b3f      	cmp	r3, #63	; 0x3f
 8001bc2:	dd01      	ble.n	8001bc8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e05e      	b.n	8001c86 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e04b      	b.n	8001c66 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	3b20      	subs	r3, #32
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	7849      	ldrb	r1, [r1, #1]
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	440b      	add	r3, r1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	e030      	b.n	8001c54 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d010      	beq.n	8001c24 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <SSD1306_Putc+0xfc>)
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b298      	uxth	r0, r3
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <SSD1306_Putc+0xfc>)
 8001c10:	885a      	ldrh	r2, [r3, #2]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	79ba      	ldrb	r2, [r7, #6]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7ff ff45 	bl	8001aac <SSD1306_DrawPixel>
 8001c22:	e014      	b.n	8001c4e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <SSD1306_Putc+0xfc>)
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b298      	uxth	r0, r3
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <SSD1306_Putc+0xfc>)
 8001c32:	885a      	ldrh	r2, [r3, #2]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	b299      	uxth	r1, r3
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f7ff ff2f 	bl	8001aac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	3301      	adds	r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d3c8      	bcc.n	8001bf2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	785b      	ldrb	r3, [r3, #1]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d3ad      	bcc.n	8001bce <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <SSD1306_Putc+0xfc>)
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <SSD1306_Putc+0xfc>)
 8001c82:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001c84:	79fb      	ldrb	r3, [r7, #7]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200005d4 	.word	0x200005d4

08001c94 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001ca2:	e012      	b.n	8001cca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	79fa      	ldrb	r2, [r7, #7]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff71 	bl	8001b94 <SSD1306_Putc>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d002      	beq.n	8001cc4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	e008      	b.n	8001cd6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1e8      	bne.n	8001ca4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <ssd1306_I2C_Init+0x24>)
 8001ce8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cea:	e002      	b.n	8001cf2 <ssd1306_I2C_Init+0x12>
		p--;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	0003d090 	.word	0x0003d090

08001d08 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b0c7      	sub	sp, #284	; 0x11c
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	4604      	mov	r4, r0
 8001d10:	4608      	mov	r0, r1
 8001d12:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001d16:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001d1a:	600a      	str	r2, [r1, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d22:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001d26:	4622      	mov	r2, r4
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d2e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001d32:	4602      	mov	r2, r0
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d3e:	460a      	mov	r2, r1
 8001d40:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d4a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d4e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d5c:	e015      	b.n	8001d8a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001d5e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d62:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d66:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	441a      	add	r2, r3
 8001d6e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d72:	3301      	adds	r3, #1
 8001d74:	7811      	ldrb	r1, [r2, #0]
 8001d76:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d7a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001d7e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d80:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d84:	3301      	adds	r3, #1
 8001d86:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d94:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001d98:	8812      	ldrh	r2, [r2, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d8df      	bhi.n	8001d5e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001da2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f107 020c 	add.w	r2, r7, #12
 8001dbc:	200a      	movs	r0, #10
 8001dbe:	9000      	str	r0, [sp, #0]
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001dc2:	f001 fa5d 	bl	8003280 <HAL_I2C_Master_Transmit>
}
 8001dc6:	bf00      	nop
 8001dc8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd90      	pop	{r4, r7, pc}
 8001dd0:	200000fc 	.word	0x200000fc

08001dd4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
 8001dde:	460b      	mov	r3, r1
 8001de0:	71bb      	strb	r3, [r7, #6]
 8001de2:	4613      	mov	r3, r2
 8001de4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	b299      	uxth	r1, r3
 8001df2:	f107 020c 	add.w	r2, r7, #12
 8001df6:	230a      	movs	r3, #10
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <ssd1306_I2C_Write+0x38>)
 8001dfe:	f001 fa3f 	bl	8003280 <HAL_I2C_Master_Transmit>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200000fc 	.word	0x200000fc

08001e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6193      	str	r3, [r2, #24]
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	61d3      	str	r3, [r2, #28]
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_MspInit+0x60>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_MspInit+0x60>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000

08001e74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <HAL_ADC_MspInit+0xbc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d122      	bne.n	8001eda <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0318 	add.w	r3, r7, #24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4819      	ldr	r0, [pc, #100]	; (8001f38 <HAL_ADC_MspInit+0xc4>)
 8001ed4:	f000 fedc 	bl	8002c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ed8:	e026      	b.n	8001f28 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_ADC_MspInit+0xc8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d121      	bne.n	8001f28 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_ADC_MspInit+0xc0>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4619      	mov	r1, r3
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <HAL_ADC_MspInit+0xc4>)
 8001f24:	f000 feb4 	bl	8002c90 <HAL_GPIO_Init>
}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40012400 	.word	0x40012400
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010800 	.word	0x40010800
 8001f3c:	40012800 	.word	0x40012800

08001f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <HAL_I2C_MspInit+0x70>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d123      	bne.n	8001fa8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_I2C_MspInit+0x74>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_I2C_MspInit+0x74>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_I2C_MspInit+0x74>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f78:	23c0      	movs	r3, #192	; 0xc0
 8001f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f7c:	2312      	movs	r3, #18
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480b      	ldr	r0, [pc, #44]	; (8001fb8 <HAL_I2C_MspInit+0x78>)
 8001f8c:	f000 fe80 	bl	8002c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_I2C_MspInit+0x74>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_I2C_MspInit+0x74>)
 8001f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f9a:	61d3      	str	r3, [r2, #28]
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_I2C_MspInit+0x74>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010c00 	.word	0x40010c00

08001fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_TIM_Base_MspInit+0x34>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_TIM_Base_MspInit+0x38>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <HAL_TIM_Base_MspInit+0x38>)
 8001fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fd8:	6193      	str	r3, [r2, #24]
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_TIM_Base_MspInit+0x38>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	40012c00 	.word	0x40012c00
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203e:	f000 f8ab 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f002 fd7a 	bl	8004b70 <__errno>
 800207c:	4603      	mov	r3, r0
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20005000 	.word	0x20005000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	200005dc 	.word	0x200005dc
 80020b0:	200005f8 	.word	0x200005f8

080020b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c2:	490d      	ldr	r1, [pc, #52]	; (80020f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d8:	4c0a      	ldr	r4, [pc, #40]	; (8002104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020e6:	f7ff ffe5 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f002 fd47 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ee:	f7fe fff7 	bl	80010e0 <main>
  bx lr
 80020f2:	4770      	bx	lr
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80020fc:	08006a54 	.word	0x08006a54
  ldr r2, =_sbss
 8002100:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002104:	200005f4 	.word	0x200005f4

08002108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <ADC1_2_IRQHandler>
	...

0800210c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_Init+0x28>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_Init+0x28>)
 8002116:	f043 0310 	orr.w	r3, r3, #16
 800211a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211c:	2003      	movs	r0, #3
 800211e:	f000 fd83 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002122:	200f      	movs	r0, #15
 8002124:	f000 f808 	bl	8002138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002128:	f7ff fe72 	bl	8001e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40022000 	.word	0x40022000

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_InitTick+0x54>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_InitTick+0x58>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fd8d 	bl	8002c76 <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00e      	b.n	8002184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d80a      	bhi.n	8002182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 fd63 	bl	8002c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_InitTick+0x5c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000010 	.word	0x20000010
 8002190:	20000018 	.word	0x20000018
 8002194:	20000014 	.word	0x20000014

08002198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_IncTick+0x1c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_IncTick+0x20>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a03      	ldr	r2, [pc, #12]	; (80021b8 <HAL_IncTick+0x20>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000018 	.word	0x20000018
 80021b8:	200005e0 	.word	0x200005e0

080021bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <HAL_GetTick+0x10>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	200005e0 	.word	0x200005e0

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff fff0 	bl	80021bc <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffe0 	bl	80021bc <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000018 	.word	0x20000018

08002218 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0be      	b.n	80023b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fe0c 	bl	8001e74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fbf1 	bl	8002a44 <ADC_ConversionStop_Disable>
 8002262:	4603      	mov	r3, r0
 8002264:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8099 	bne.w	80023a6 <HAL_ADC_Init+0x18e>
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 8095 	bne.w	80023a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002284:	f023 0302 	bic.w	r3, r3, #2
 8002288:	f043 0202 	orr.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002298:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7b1b      	ldrb	r3, [r3, #12]
 800229e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b0:	d003      	beq.n	80022ba <HAL_ADC_Init+0xa2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d102      	bne.n	80022c0 <HAL_ADC_Init+0xa8>
 80022ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022be:	e000      	b.n	80022c2 <HAL_ADC_Init+0xaa>
 80022c0:	2300      	movs	r3, #0
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7d1b      	ldrb	r3, [r3, #20]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d119      	bne.n	8002304 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7b1b      	ldrb	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	3b01      	subs	r3, #1
 80022de:	035a      	lsls	r2, r3, #13
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e00b      	b.n	8002304 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HAL_ADC_Init+0x1a8>)
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	430b      	orrs	r3, r1
 800232a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002334:	d003      	beq.n	800233e <HAL_ADC_Init+0x126>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d104      	bne.n	8002348 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	3b01      	subs	r3, #1
 8002344:	051b      	lsls	r3, r3, #20
 8002346:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	430a      	orrs	r2, r1
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_ADC_Init+0x1ac>)
 8002364:	4013      	ands	r3, r2
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	d10b      	bne.n	8002384 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002382:	e018      	b.n	80023b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f023 0312 	bic.w	r3, r3, #18
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023a4:	e007      	b.n	80023b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	f043 0210 	orr.w	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	ffe1f7fd 	.word	0xffe1f7fd
 80023c4:	ff1f0efe 	.word	0xff1f0efe

080023c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_Start+0x1a>
 80023de:	2302      	movs	r3, #2
 80023e0:	e098      	b.n	8002514 <HAL_ADC_Start+0x14c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fad0 	bl	8002990 <ADC_Enable>
 80023f0:	4603      	mov	r3, r0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 8087 	bne.w	800250a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a41      	ldr	r2, [pc, #260]	; (800251c <HAL_ADC_Start+0x154>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d105      	bne.n	8002426 <HAL_ADC_Start+0x5e>
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_ADC_Start+0x158>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d026      	beq.n	800248e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002448:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002450:	e01d      	b.n	800248e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <HAL_ADC_Start+0x158>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_ADC_Start+0xaa>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2b      	ldr	r2, [pc, #172]	; (800251c <HAL_ADC_Start+0x154>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10d      	bne.n	800248e <HAL_ADC_Start+0xc6>
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_ADC_Start+0x158>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002486:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	f023 0206 	bic.w	r2, r3, #6
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80024a6:	e002      	b.n	80024ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0202 	mvn.w	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024ce:	d113      	bne.n	80024f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_ADC_Start+0x154>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d105      	bne.n	80024e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_ADC_Start+0x158>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d108      	bne.n	80024f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	e00c      	b.n	8002512 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e003      	b.n	8002512 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40012800 	.word	0x40012800
 8002520:	40012400 	.word	0x40012400

08002524 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_ADC_Stop+0x1a>
 800253a:	2302      	movs	r3, #2
 800253c:	e01a      	b.n	8002574 <HAL_ADC_Stop+0x50>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa7c 	bl	8002a44 <ADC_ConversionStop_Disable>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002592:	f7ff fe13 	bl	80021bc <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0d3      	b.n	8002766 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d131      	bne.n	8002630 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d12a      	bne.n	8002630 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025da:	e021      	b.n	8002620 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e2:	d01d      	beq.n	8002620 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_ADC_PollForConversion+0x7e>
 80025ea:	f7ff fde7 	bl	80021bc <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d212      	bcs.n	8002620 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	f043 0204 	orr.w	r2, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0a2      	b.n	8002766 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0d6      	beq.n	80025dc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800262e:	e070      	b.n	8002712 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_ADC_PollForConversion+0x1f4>)
 8002632:	681c      	ldr	r4, [r3, #0]
 8002634:	2002      	movs	r0, #2
 8002636:	f001 ff27 	bl	8004488 <HAL_RCCEx_GetPeriphCLKFreq>
 800263a:	4603      	mov	r3, r0
 800263c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <HAL_ADC_PollForConversion+0x1f8>)
 8002648:	400b      	ands	r3, r1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d118      	bne.n	8002680 <HAL_ADC_PollForConversion+0x104>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68d9      	ldr	r1, [r3, #12]
 8002654:	4b48      	ldr	r3, [pc, #288]	; (8002778 <HAL_ADC_PollForConversion+0x1fc>)
 8002656:	400b      	ands	r3, r1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d111      	bne.n	8002680 <HAL_ADC_PollForConversion+0x104>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6919      	ldr	r1, [r3, #16]
 8002662:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_ADC_PollForConversion+0x200>)
 8002664:	400b      	ands	r3, r1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d108      	bne.n	800267c <HAL_ADC_PollForConversion+0x100>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68d9      	ldr	r1, [r3, #12]
 8002670:	4b43      	ldr	r3, [pc, #268]	; (8002780 <HAL_ADC_PollForConversion+0x204>)
 8002672:	400b      	ands	r3, r1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_PollForConversion+0x100>
 8002678:	2314      	movs	r3, #20
 800267a:	e020      	b.n	80026be <HAL_ADC_PollForConversion+0x142>
 800267c:	2329      	movs	r3, #41	; 0x29
 800267e:	e01e      	b.n	80026be <HAL_ADC_PollForConversion+0x142>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_ADC_PollForConversion+0x200>)
 8002688:	400b      	ands	r3, r1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_ADC_PollForConversion+0x120>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68d9      	ldr	r1, [r3, #12]
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <HAL_ADC_PollForConversion+0x204>)
 8002696:	400b      	ands	r3, r1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <HAL_ADC_PollForConversion+0x13c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_ADC_PollForConversion+0x208>)
 80026a4:	400b      	ands	r3, r1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_ADC_PollForConversion+0x140>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68d9      	ldr	r1, [r3, #12]
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_ADC_PollForConversion+0x208>)
 80026b2:	400b      	ands	r3, r1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_PollForConversion+0x140>
 80026b8:	2354      	movs	r3, #84	; 0x54
 80026ba:	e000      	b.n	80026be <HAL_ADC_PollForConversion+0x142>
 80026bc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026c4:	e021      	b.n	800270a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d01a      	beq.n	8002704 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_ADC_PollForConversion+0x168>
 80026d4:	f7ff fd72 	bl	80021bc <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d20f      	bcs.n	8002704 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d90b      	bls.n	8002704 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e030      	b.n	8002766 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3301      	adds	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	429a      	cmp	r2, r3
 8002710:	d8d9      	bhi.n	80026c6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f06f 0212 	mvn.w	r2, #18
 800271a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002732:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002736:	d115      	bne.n	8002764 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	20000010 	.word	0x20000010
 8002774:	24924924 	.word	0x24924924
 8002778:	00924924 	.word	0x00924924
 800277c:	12492492 	.word	0x12492492
 8002780:	00492492 	.word	0x00492492
 8002784:	00249249 	.word	0x00249249

08002788 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x20>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0dc      	b.n	800297a <HAL_ADC_ConfigChannel+0x1da>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d81c      	bhi.n	800280a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b05      	subs	r3, #5
 80027e2:	221f      	movs	r2, #31
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	4019      	ands	r1, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b05      	subs	r3, #5
 80027fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	635a      	str	r2, [r3, #52]	; 0x34
 8002808:	e03c      	b.n	8002884 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d81c      	bhi.n	800284c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b23      	subs	r3, #35	; 0x23
 8002824:	221f      	movs	r2, #31
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	4019      	ands	r1, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b23      	subs	r3, #35	; 0x23
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
 800284a:	e01b      	b.n	8002884 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	3b41      	subs	r3, #65	; 0x41
 800285e:	221f      	movs	r2, #31
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	4019      	ands	r1, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	3b41      	subs	r3, #65	; 0x41
 8002878:	fa00 f203 	lsl.w	r2, r0, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b09      	cmp	r3, #9
 800288a:	d91c      	bls.n	80028c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68d9      	ldr	r1, [r3, #12]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	3b1e      	subs	r3, #30
 800289e:	2207      	movs	r2, #7
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	4019      	ands	r1, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6898      	ldr	r0, [r3, #8]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	3b1e      	subs	r3, #30
 80028b8:	fa00 f203 	lsl.w	r2, r0, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	e019      	b.n	80028fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6919      	ldr	r1, [r3, #16]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	2207      	movs	r2, #7
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	4019      	ands	r1, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6898      	ldr	r0, [r3, #8]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	fa00 f203 	lsl.w	r2, r0, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d003      	beq.n	800290a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002906:	2b11      	cmp	r3, #17
 8002908:	d132      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_ADC_ConfigChannel+0x1e4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d125      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d126      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002930:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b10      	cmp	r3, #16
 8002938:	d11a      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_ADC_ConfigChannel+0x1e8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a13      	ldr	r2, [pc, #76]	; (800298c <HAL_ADC_ConfigChannel+0x1ec>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	0c9a      	lsrs	r2, r3, #18
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002950:	e002      	b.n	8002958 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3b01      	subs	r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f9      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x1b2>
 800295e:	e007      	b.n	8002970 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	40012400 	.word	0x40012400
 8002988:	20000010 	.word	0x20000010
 800298c:	431bde83 	.word	0x431bde83

08002990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d040      	beq.n	8002a30 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029be:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <ADC_Enable+0xac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <ADC_Enable+0xb0>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	0c9b      	lsrs	r3, r3, #18
 80029ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029cc:	e002      	b.n	80029d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f9      	bne.n	80029ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029da:	f7ff fbef 	bl	80021bc <HAL_GetTick>
 80029de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029e0:	e01f      	b.n	8002a22 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029e2:	f7ff fbeb 	bl	80021bc <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d918      	bls.n	8002a22 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d011      	beq.n	8002a22 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e007      	b.n	8002a32 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d1d8      	bne.n	80029e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000010 	.word	0x20000010
 8002a40:	431bde83 	.word	0x431bde83

08002a44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d12e      	bne.n	8002abc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a6e:	f7ff fba5 	bl	80021bc <HAL_GetTick>
 8002a72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a74:	e01b      	b.n	8002aae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a76:	f7ff fba1 	bl	80021bc <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d914      	bls.n	8002aae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10d      	bne.n	8002aae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	f043 0210 	orr.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e007      	b.n	8002abe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d0dc      	beq.n	8002a76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afa:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	60d3      	str	r3, [r2, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <__NVIC_GetPriorityGrouping+0x18>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	f003 0307 	and.w	r3, r3, #7
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	; (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f7ff ff90 	bl	8002b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff49 	bl	8002ac8 <__NVIC_SetPriorityGrouping>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff5e 	bl	8002b10 <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff90 	bl	8002b80 <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5f 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffb0 	bl	8002be4 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b08b      	sub	sp, #44	; 0x2c
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca2:	e169      	b.n	8002f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	f040 8158 	bne.w	8002f72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a9a      	ldr	r2, [pc, #616]	; (8002f30 <HAL_GPIO_Init+0x2a0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d05e      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002ccc:	4a98      	ldr	r2, [pc, #608]	; (8002f30 <HAL_GPIO_Init+0x2a0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d875      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002cd2:	4a98      	ldr	r2, [pc, #608]	; (8002f34 <HAL_GPIO_Init+0x2a4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d058      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002cd8:	4a96      	ldr	r2, [pc, #600]	; (8002f34 <HAL_GPIO_Init+0x2a4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d86f      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002cde:	4a96      	ldr	r2, [pc, #600]	; (8002f38 <HAL_GPIO_Init+0x2a8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d052      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002ce4:	4a94      	ldr	r2, [pc, #592]	; (8002f38 <HAL_GPIO_Init+0x2a8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d869      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002cea:	4a94      	ldr	r2, [pc, #592]	; (8002f3c <HAL_GPIO_Init+0x2ac>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d04c      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002cf0:	4a92      	ldr	r2, [pc, #584]	; (8002f3c <HAL_GPIO_Init+0x2ac>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d863      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002cf6:	4a92      	ldr	r2, [pc, #584]	; (8002f40 <HAL_GPIO_Init+0x2b0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d046      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002cfc:	4a90      	ldr	r2, [pc, #576]	; (8002f40 <HAL_GPIO_Init+0x2b0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d85d      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002d02:	2b12      	cmp	r3, #18
 8002d04:	d82a      	bhi.n	8002d5c <HAL_GPIO_Init+0xcc>
 8002d06:	2b12      	cmp	r3, #18
 8002d08:	d859      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002d0a:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <HAL_GPIO_Init+0x80>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d8b 	.word	0x08002d8b
 8002d14:	08002d65 	.word	0x08002d65
 8002d18:	08002d77 	.word	0x08002d77
 8002d1c:	08002db9 	.word	0x08002db9
 8002d20:	08002dbf 	.word	0x08002dbf
 8002d24:	08002dbf 	.word	0x08002dbf
 8002d28:	08002dbf 	.word	0x08002dbf
 8002d2c:	08002dbf 	.word	0x08002dbf
 8002d30:	08002dbf 	.word	0x08002dbf
 8002d34:	08002dbf 	.word	0x08002dbf
 8002d38:	08002dbf 	.word	0x08002dbf
 8002d3c:	08002dbf 	.word	0x08002dbf
 8002d40:	08002dbf 	.word	0x08002dbf
 8002d44:	08002dbf 	.word	0x08002dbf
 8002d48:	08002dbf 	.word	0x08002dbf
 8002d4c:	08002dbf 	.word	0x08002dbf
 8002d50:	08002dbf 	.word	0x08002dbf
 8002d54:	08002d6d 	.word	0x08002d6d
 8002d58:	08002d81 	.word	0x08002d81
 8002d5c:	4a79      	ldr	r2, [pc, #484]	; (8002f44 <HAL_GPIO_Init+0x2b4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d62:	e02c      	b.n	8002dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	623b      	str	r3, [r7, #32]
          break;
 8002d6a:	e029      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	3304      	adds	r3, #4
 8002d72:	623b      	str	r3, [r7, #32]
          break;
 8002d74:	e024      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e01f      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	330c      	adds	r3, #12
 8002d86:	623b      	str	r3, [r7, #32]
          break;
 8002d88:	e01a      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d92:	2304      	movs	r3, #4
 8002d94:	623b      	str	r3, [r7, #32]
          break;
 8002d96:	e013      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da0:	2308      	movs	r3, #8
 8002da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	611a      	str	r2, [r3, #16]
          break;
 8002daa:	e009      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dac:	2308      	movs	r3, #8
 8002dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	615a      	str	r2, [r3, #20]
          break;
 8002db6:	e003      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002db8:	2300      	movs	r3, #0
 8002dba:	623b      	str	r3, [r7, #32]
          break;
 8002dbc:	e000      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          break;
 8002dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
 8002dc4:	d801      	bhi.n	8002dca <HAL_GPIO_Init+0x13a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	e001      	b.n	8002dce <HAL_GPIO_Init+0x13e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2bff      	cmp	r3, #255	; 0xff
 8002dd4:	d802      	bhi.n	8002ddc <HAL_GPIO_Init+0x14c>
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	e002      	b.n	8002de2 <HAL_GPIO_Init+0x152>
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	3b08      	subs	r3, #8
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	210f      	movs	r1, #15
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	6a39      	ldr	r1, [r7, #32]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80b1 	beq.w	8002f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e10:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <HAL_GPIO_Init+0x2b8>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a4c      	ldr	r2, [pc, #304]	; (8002f48 <HAL_GPIO_Init+0x2b8>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_GPIO_Init+0x2b8>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e28:	4a48      	ldr	r2, [pc, #288]	; (8002f4c <HAL_GPIO_Init+0x2bc>)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	3302      	adds	r3, #2
 8002e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	220f      	movs	r2, #15
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a40      	ldr	r2, [pc, #256]	; (8002f50 <HAL_GPIO_Init+0x2c0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <HAL_GPIO_Init+0x1ec>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3f      	ldr	r2, [pc, #252]	; (8002f54 <HAL_GPIO_Init+0x2c4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00d      	beq.n	8002e78 <HAL_GPIO_Init+0x1e8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3e      	ldr	r2, [pc, #248]	; (8002f58 <HAL_GPIO_Init+0x2c8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <HAL_GPIO_Init+0x1e4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3d      	ldr	r2, [pc, #244]	; (8002f5c <HAL_GPIO_Init+0x2cc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_GPIO_Init+0x1e0>
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e006      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e70:	2304      	movs	r3, #4
 8002e72:	e004      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e002      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	f002 0203 	and.w	r2, r2, #3
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	4093      	lsls	r3, r2
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e8e:	492f      	ldr	r1, [pc, #188]	; (8002f4c <HAL_GPIO_Init+0x2bc>)
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	492c      	ldr	r1, [pc, #176]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4928      	ldr	r1, [pc, #160]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ed0:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4922      	ldr	r1, [pc, #136]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	491e      	ldr	r1, [pc, #120]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4918      	ldr	r1, [pc, #96]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	4914      	ldr	r1, [pc, #80]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d021      	beq.n	8002f64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	490e      	ldr	r1, [pc, #56]	; (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60cb      	str	r3, [r1, #12]
 8002f2c:	e021      	b.n	8002f72 <HAL_GPIO_Init+0x2e2>
 8002f2e:	bf00      	nop
 8002f30:	10320000 	.word	0x10320000
 8002f34:	10310000 	.word	0x10310000
 8002f38:	10220000 	.word	0x10220000
 8002f3c:	10210000 	.word	0x10210000
 8002f40:	10120000 	.word	0x10120000
 8002f44:	10110000 	.word	0x10110000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40010800 	.word	0x40010800
 8002f54:	40010c00 	.word	0x40010c00
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40011400 	.word	0x40011400
 8002f60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_GPIO_Init+0x304>)
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	4909      	ldr	r1, [pc, #36]	; (8002f94 <HAL_GPIO_Init+0x304>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	3301      	adds	r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f47f ae8e 	bne.w	8002ca4 <HAL_GPIO_Init+0x14>
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	372c      	adds	r7, #44	; 0x2c
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40010400 	.word	0x40010400

08002f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e001      	b.n	8002fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	807b      	strh	r3, [r7, #2]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd6:	787b      	ldrb	r3, [r7, #1]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fe2:	e003      	b.n	8002fec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	041a      	lsls	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	611a      	str	r2, [r3, #16]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e12b      	b.n	8003262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe ff8e 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800305a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800305c:	f001 f918 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8003060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a81      	ldr	r2, [pc, #516]	; (800326c <HAL_I2C_Init+0x274>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d807      	bhi.n	800307c <HAL_I2C_Init+0x84>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a80      	ldr	r2, [pc, #512]	; (8003270 <HAL_I2C_Init+0x278>)
 8003070:	4293      	cmp	r3, r2
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e006      	b.n	800308a <HAL_I2C_Init+0x92>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a7d      	ldr	r2, [pc, #500]	; (8003274 <HAL_I2C_Init+0x27c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	bf94      	ite	ls
 8003084:	2301      	movls	r3, #1
 8003086:	2300      	movhi	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0e7      	b.n	8003262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a78      	ldr	r2, [pc, #480]	; (8003278 <HAL_I2C_Init+0x280>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0c9b      	lsrs	r3, r3, #18
 800309c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a6a      	ldr	r2, [pc, #424]	; (800326c <HAL_I2C_Init+0x274>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d802      	bhi.n	80030cc <HAL_I2C_Init+0xd4>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3301      	adds	r3, #1
 80030ca:	e009      	b.n	80030e0 <HAL_I2C_Init+0xe8>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	4a69      	ldr	r2, [pc, #420]	; (800327c <HAL_I2C_Init+0x284>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	3301      	adds	r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	495c      	ldr	r1, [pc, #368]	; (800326c <HAL_I2C_Init+0x274>)
 80030fc:	428b      	cmp	r3, r1
 80030fe:	d819      	bhi.n	8003134 <HAL_I2C_Init+0x13c>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e59      	subs	r1, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fbb1 f3f3 	udiv	r3, r1, r3
 800310e:	1c59      	adds	r1, r3, #1
 8003110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003114:	400b      	ands	r3, r1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_I2C_Init+0x138>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1e59      	subs	r1, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fbb1 f3f3 	udiv	r3, r1, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312e:	e051      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 8003130:	2304      	movs	r3, #4
 8003132:	e04f      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d111      	bne.n	8003160 <HAL_I2C_Init+0x168>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e58      	subs	r0, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e012      	b.n	8003186 <HAL_I2C_Init+0x18e>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1e58      	subs	r0, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	0099      	lsls	r1, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	fbb0 f3f3 	udiv	r3, r0, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Init+0x196>
 800318a:	2301      	movs	r3, #1
 800318c:	e022      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10e      	bne.n	80031b4 <HAL_I2C_Init+0x1bc>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e58      	subs	r0, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	440b      	add	r3, r1
 80031a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b2:	e00f      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1e58      	subs	r0, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	0099      	lsls	r1, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	6809      	ldr	r1, [r1, #0]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6911      	ldr	r1, [r2, #16]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	430b      	orrs	r3, r1
 8003216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	000186a0 	.word	0x000186a0
 8003270:	001e847f 	.word	0x001e847f
 8003274:	003d08ff 	.word	0x003d08ff
 8003278:	431bde83 	.word	0x431bde83
 800327c:	10624dd3 	.word	0x10624dd3

08003280 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	460b      	mov	r3, r1
 800328e:	817b      	strh	r3, [r7, #10]
 8003290:	4613      	mov	r3, r2
 8003292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003294:	f7fe ff92 	bl	80021bc <HAL_GetTick>
 8003298:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	f040 80e0 	bne.w	8003468 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2319      	movs	r3, #25
 80032ae:	2201      	movs	r2, #1
 80032b0:	4970      	ldr	r1, [pc, #448]	; (8003474 <HAL_I2C_Master_Transmit+0x1f4>)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fa92 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
 80032c0:	e0d3      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_I2C_Master_Transmit+0x50>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e0cc      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d007      	beq.n	80032f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2221      	movs	r2, #33	; 0x21
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2210      	movs	r2, #16
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	893a      	ldrh	r2, [r7, #8]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a50      	ldr	r2, [pc, #320]	; (8003478 <HAL_I2C_Master_Transmit+0x1f8>)
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003338:	8979      	ldrh	r1, [r7, #10]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f9ca 	bl	80036d8 <I2C_MasterRequestWrite>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e08d      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003364:	e066      	b.n	8003434 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	6a39      	ldr	r1, [r7, #32]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fb0c 	bl	8003988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2b04      	cmp	r3, #4
 800337c:	d107      	bne.n	800338e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e06b      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d11b      	bne.n	8003408 <HAL_I2C_Master_Transmit+0x188>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d017      	beq.n	8003408 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	6a39      	ldr	r1, [r7, #32]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fafc 	bl	8003a0a <I2C_WaitOnBTFFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	2b04      	cmp	r3, #4
 800341e:	d107      	bne.n	8003430 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e01a      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d194      	bne.n	8003366 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	00100002 	.word	0x00100002
 8003478:	ffff0000 	.word	0xffff0000

0800347c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	460b      	mov	r3, r1
 800348a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7fe fe96 	bl	80021bc <HAL_GetTick>
 8003490:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003492:	2301      	movs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b20      	cmp	r3, #32
 80034a0:	f040 8111 	bne.w	80036c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2319      	movs	r3, #25
 80034aa:	2201      	movs	r2, #1
 80034ac:	4988      	ldr	r1, [pc, #544]	; (80036d0 <HAL_I2C_IsDeviceReady+0x254>)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f994 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
 80034bc:	e104      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_I2C_IsDeviceReady+0x50>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e0fd      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d007      	beq.n	80034f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003500:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2224      	movs	r2, #36	; 0x24
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a70      	ldr	r2, [pc, #448]	; (80036d4 <HAL_I2C_IsDeviceReady+0x258>)
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003524:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2200      	movs	r2, #0
 800352e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f952 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354c:	d103      	bne.n	8003556 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e0b6      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800355a:	897b      	ldrh	r3, [r7, #10]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003568:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe fe27 	bl	80021bc <HAL_GetTick>
 800356e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b02      	cmp	r3, #2
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800359e:	e025      	b.n	80035ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035a0:	f7fe fe0c 	bl	80021bc <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d302      	bcc.n	80035b6 <HAL_I2C_IsDeviceReady+0x13a>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	22a0      	movs	r2, #160	; 0xa0
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2ba0      	cmp	r3, #160	; 0xa0
 80035f6:	d005      	beq.n	8003604 <HAL_I2C_IsDeviceReady+0x188>
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <HAL_I2C_IsDeviceReady+0x188>
 80035fe:	7dbb      	ldrb	r3, [r7, #22]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0cd      	beq.n	80035a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d129      	bne.n	800366e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2319      	movs	r3, #25
 8003646:	2201      	movs	r2, #1
 8003648:	4921      	ldr	r1, [pc, #132]	; (80036d0 <HAL_I2C_IsDeviceReady+0x254>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f8c6 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e036      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e02c      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003686:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2319      	movs	r3, #25
 800368e:	2201      	movs	r2, #1
 8003690:	490f      	ldr	r1, [pc, #60]	; (80036d0 <HAL_I2C_IsDeviceReady+0x254>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f8a2 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e012      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	f4ff af32 	bcc.w	8003516 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	00100002 	.word	0x00100002
 80036d4:	ffff0000 	.word	0xffff0000

080036d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	460b      	mov	r3, r1
 80036e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d006      	beq.n	8003702 <I2C_MasterRequestWrite+0x2a>
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d003      	beq.n	8003702 <I2C_MasterRequestWrite+0x2a>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003700:	d108      	bne.n	8003714 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e00b      	b.n	800372c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	2b12      	cmp	r3, #18
 800371a:	d107      	bne.n	800372c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f84f 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d103      	bne.n	800375c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e035      	b.n	80037cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003768:	d108      	bne.n	800377c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003778:	611a      	str	r2, [r3, #16]
 800377a:	e01b      	b.n	80037b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800377c:	897b      	ldrh	r3, [r7, #10]
 800377e:	11db      	asrs	r3, r3, #7
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 0306 	and.w	r3, r3, #6
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f063 030f 	orn	r3, r3, #15
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	490e      	ldr	r1, [pc, #56]	; (80037d4 <I2C_MasterRequestWrite+0xfc>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f875 	bl	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e010      	b.n	80037cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4907      	ldr	r1, [pc, #28]	; (80037d8 <I2C_MasterRequestWrite+0x100>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f865 	bl	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	00010008 	.word	0x00010008
 80037d8:	00010002 	.word	0x00010002

080037dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ec:	e025      	b.n	800383a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d021      	beq.n	800383a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fe fce1 	bl	80021bc <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d116      	bne.n	800383a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e023      	b.n	8003882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10d      	bne.n	8003860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	e00c      	b.n	800387a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf0c      	ite	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	2300      	movne	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	429a      	cmp	r2, r3
 800387e:	d0b6      	beq.n	80037ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003898:	e051      	b.n	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d123      	bne.n	80038f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e046      	b.n	8003980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d021      	beq.n	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fc5f 	bl	80021bc <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d116      	bne.n	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e020      	b.n	8003980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10c      	bne.n	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4013      	ands	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf14      	ite	ne
 800395a:	2301      	movne	r3, #1
 800395c:	2300      	moveq	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	e00b      	b.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	43da      	mvns	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4013      	ands	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf14      	ite	ne
 8003974:	2301      	movne	r3, #1
 8003976:	2300      	moveq	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d18d      	bne.n	800389a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003994:	e02d      	b.n	80039f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f878 	bl	8003a8c <I2C_IsAcknowledgeFailed>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e02d      	b.n	8003a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d021      	beq.n	80039f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ae:	f7fe fc05 	bl	80021bc <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d116      	bne.n	80039f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e007      	b.n	8003a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d1ca      	bne.n	8003996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a16:	e02d      	b.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f837 	bl	8003a8c <I2C_IsAcknowledgeFailed>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e02d      	b.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d021      	beq.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7fe fbc4 	bl	80021bc <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e007      	b.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d1ca      	bne.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d11b      	bne.n	8003adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f043 0204 	orr.w	r2, r3, #4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e272      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 8087 	beq.w	8003c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b08:	4b92      	ldr	r3, [pc, #584]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d00c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b14:	4b8f      	ldr	r3, [pc, #572]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d112      	bne.n	8003b46 <HAL_RCC_OscConfig+0x5e>
 8003b20:	4b8c      	ldr	r3, [pc, #560]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2c:	d10b      	bne.n	8003b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2e:	4b89      	ldr	r3, [pc, #548]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d06c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x12c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d168      	bne.n	8003c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e24c      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4e:	d106      	bne.n	8003b5e <HAL_RCC_OscConfig+0x76>
 8003b50:	4b80      	ldr	r3, [pc, #512]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a7f      	ldr	r2, [pc, #508]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	e02e      	b.n	8003bbc <HAL_RCC_OscConfig+0xd4>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x98>
 8003b66:	4b7b      	ldr	r3, [pc, #492]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a7a      	ldr	r2, [pc, #488]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4b78      	ldr	r3, [pc, #480]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a77      	ldr	r2, [pc, #476]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e01d      	b.n	8003bbc <HAL_RCC_OscConfig+0xd4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0xbc>
 8003b8a:	4b72      	ldr	r3, [pc, #456]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a71      	ldr	r2, [pc, #452]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a6e      	ldr	r2, [pc, #440]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0xd4>
 8003ba4:	4b6b      	ldr	r3, [pc, #428]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6a      	ldr	r2, [pc, #424]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b68      	ldr	r3, [pc, #416]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a67      	ldr	r2, [pc, #412]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fafa 	bl	80021bc <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe faf6 	bl	80021bc <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e200      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	4b5d      	ldr	r3, [pc, #372]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0xe4>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe fae6 	bl	80021bc <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fae2 	bl	80021bc <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1ec      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x10c>
 8003c12:	e000      	b.n	8003c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c22:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c2e:	4b49      	ldr	r3, [pc, #292]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d11c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x18c>
 8003c3a:	4b46      	ldr	r3, [pc, #280]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d116      	bne.n	8003c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	4b43      	ldr	r3, [pc, #268]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_RCC_OscConfig+0x176>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e1c0      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5e:	4b3d      	ldr	r3, [pc, #244]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4939      	ldr	r1, [pc, #228]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	e03a      	b.n	8003cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d020      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c7c:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fe fa9b 	bl	80021bc <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8a:	f7fe fa97 	bl	80021bc <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e1a1      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4927      	ldr	r1, [pc, #156]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]
 8003cbc:	e015      	b.n	8003cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbe:	4b26      	ldr	r3, [pc, #152]	; (8003d58 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fe fa7a 	bl	80021bc <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ccc:	f7fe fa76 	bl	80021bc <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e180      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d03a      	beq.n	8003d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d019      	beq.n	8003d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfe:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_RCC_OscConfig+0x274>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d04:	f7fe fa5a 	bl	80021bc <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fe fa56 	bl	80021bc <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e160      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	f000 fad8 	bl	80042e0 <RCC_Delay>
 8003d30:	e01c      	b.n	8003d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_OscConfig+0x274>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d38:	f7fe fa40 	bl	80021bc <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3e:	e00f      	b.n	8003d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fe fa3c 	bl	80021bc <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d908      	bls.n	8003d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e146      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	42420000 	.word	0x42420000
 8003d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	4b92      	ldr	r3, [pc, #584]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e9      	bne.n	8003d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80a6 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7e:	4b8b      	ldr	r3, [pc, #556]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10d      	bne.n	8003da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8a:	4b88      	ldr	r3, [pc, #544]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4a87      	ldr	r2, [pc, #540]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d94:	61d3      	str	r3, [r2, #28]
 8003d96:	4b85      	ldr	r3, [pc, #532]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b82      	ldr	r3, [pc, #520]	; (8003fb0 <HAL_RCC_OscConfig+0x4c8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d118      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db2:	4b7f      	ldr	r3, [pc, #508]	; (8003fb0 <HAL_RCC_OscConfig+0x4c8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7e      	ldr	r2, [pc, #504]	; (8003fb0 <HAL_RCC_OscConfig+0x4c8>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7fe f9fd 	bl	80021bc <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc6:	f7fe f9f9 	bl	80021bc <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b64      	cmp	r3, #100	; 0x64
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e103      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	4b75      	ldr	r3, [pc, #468]	; (8003fb0 <HAL_RCC_OscConfig+0x4c8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x312>
 8003dec:	4b6f      	ldr	r3, [pc, #444]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4a6e      	ldr	r2, [pc, #440]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6213      	str	r3, [r2, #32]
 8003df8:	e02d      	b.n	8003e56 <HAL_RCC_OscConfig+0x36e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x334>
 8003e02:	4b6a      	ldr	r3, [pc, #424]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4a69      	ldr	r2, [pc, #420]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	6213      	str	r3, [r2, #32]
 8003e0e:	4b67      	ldr	r3, [pc, #412]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4a66      	ldr	r2, [pc, #408]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	6213      	str	r3, [r2, #32]
 8003e1a:	e01c      	b.n	8003e56 <HAL_RCC_OscConfig+0x36e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d10c      	bne.n	8003e3e <HAL_RCC_OscConfig+0x356>
 8003e24:	4b61      	ldr	r3, [pc, #388]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	4a60      	ldr	r2, [pc, #384]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	f043 0304 	orr.w	r3, r3, #4
 8003e2e:	6213      	str	r3, [r2, #32]
 8003e30:	4b5e      	ldr	r3, [pc, #376]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4a5d      	ldr	r2, [pc, #372]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6213      	str	r3, [r2, #32]
 8003e3c:	e00b      	b.n	8003e56 <HAL_RCC_OscConfig+0x36e>
 8003e3e:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4a5a      	ldr	r2, [pc, #360]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	6213      	str	r3, [r2, #32]
 8003e4a:	4b58      	ldr	r3, [pc, #352]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a57      	ldr	r2, [pc, #348]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	f023 0304 	bic.w	r3, r3, #4
 8003e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d015      	beq.n	8003e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe f9ad 	bl	80021bc <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fe f9a9 	bl	80021bc <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e0b1      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7c:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ee      	beq.n	8003e66 <HAL_RCC_OscConfig+0x37e>
 8003e88:	e014      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8a:	f7fe f997 	bl	80021bc <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e92:	f7fe f993 	bl	80021bc <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e09b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea8:	4b40      	ldr	r3, [pc, #256]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ee      	bne.n	8003e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eba:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4a3b      	ldr	r2, [pc, #236]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8087 	beq.w	8003fde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d061      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d146      	bne.n	8003f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee4:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fe f967 	bl	80021bc <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef2:	f7fe f963 	bl	80021bc <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e06d      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f04:	4b29      	ldr	r3, [pc, #164]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f0      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f18:	d108      	bne.n	8003f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f1a:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4921      	ldr	r1, [pc, #132]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f2c:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a19      	ldr	r1, [r3, #32]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	491b      	ldr	r1, [pc, #108]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <HAL_RCC_OscConfig+0x4cc>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe f937 	bl	80021bc <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fe f933 	bl	80021bc <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e03d      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x46a>
 8003f70:	e035      	b.n	8003fde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fe f920 	bl	80021bc <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fe f91c 	bl	80021bc <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e026      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x498>
 8003f9e:	e01e      	b.n	8003fde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e019      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_OscConfig+0x500>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000

08003fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0d0      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b6a      	ldr	r3, [pc, #424]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d910      	bls.n	8004030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 0207 	bic.w	r2, r3, #7
 8004016:	4965      	ldr	r1, [pc, #404]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0b8      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a58      	ldr	r2, [pc, #352]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004060:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a52      	ldr	r2, [pc, #328]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800406a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	494d      	ldr	r1, [pc, #308]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d040      	beq.n	800410c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d115      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e07f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e073      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06b      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4936      	ldr	r1, [pc, #216]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040dc:	f7fe f86e 	bl	80021bc <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fe f86a 	bl	80021bc <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e053      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d210      	bcs.n	800413c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 0207 	bic.w	r2, r3, #7
 8004122:	4922      	ldr	r1, [pc, #136]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e032      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4916      	ldr	r1, [pc, #88]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	490e      	ldr	r1, [pc, #56]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800417a:	f000 f821 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800417e:	4602      	mov	r2, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	490a      	ldr	r1, [pc, #40]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	5ccb      	ldrb	r3, [r1, r3]
 800418e:	fa22 f303 	lsr.w	r3, r2, r3
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_ClockConfig+0x1d0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fd ffcc 	bl	8002138 <HAL_InitTick>

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40021000 	.word	0x40021000
 80041b4:	08006a00 	.word	0x08006a00
 80041b8:	20000010 	.word	0x20000010
 80041bc:	20000014 	.word	0x20000014

080041c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b490      	push	{r4, r7}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041c6:	4b29      	ldr	r3, [pc, #164]	; (800426c <HAL_RCC_GetSysClockFreq+0xac>)
 80041c8:	1d3c      	adds	r4, r7, #4
 80041ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041d0:	f240 2301 	movw	r3, #513	; 0x201
 80041d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	2300      	movs	r3, #0
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041ea:	4b21      	ldr	r3, [pc, #132]	; (8004270 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x40>
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d003      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x46>
 80041fe:	e02b      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004202:	623b      	str	r3, [r7, #32]
      break;
 8004204:	e02b      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	0c9b      	lsrs	r3, r3, #18
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3328      	adds	r3, #40	; 0x28
 8004210:	443b      	add	r3, r7
 8004212:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004216:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d012      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004222:	4b13      	ldr	r3, [pc, #76]	; (8004270 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	0c5b      	lsrs	r3, r3, #17
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	3328      	adds	r3, #40	; 0x28
 800422e:	443b      	add	r3, r7
 8004230:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004234:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4a0e      	ldr	r2, [pc, #56]	; (8004274 <HAL_RCC_GetSysClockFreq+0xb4>)
 800423a:	fb03 f202 	mul.w	r2, r3, r2
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
 8004246:	e004      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4a0b      	ldr	r2, [pc, #44]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	623b      	str	r3, [r7, #32]
      break;
 8004256:	e002      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCC_GetSysClockFreq+0xb4>)
 800425a:	623b      	str	r3, [r7, #32]
      break;
 800425c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425e:	6a3b      	ldr	r3, [r7, #32]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bc90      	pop	{r4, r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	08005518 	.word	0x08005518
 8004270:	40021000 	.word	0x40021000
 8004274:	007a1200 	.word	0x007a1200
 8004278:	003d0900 	.word	0x003d0900

0800427c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b02      	ldr	r3, [pc, #8]	; (800428c <HAL_RCC_GetHCLKFreq+0x10>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	20000010 	.word	0x20000010

08004290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004294:	f7ff fff2 	bl	800427c <HAL_RCC_GetHCLKFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	4903      	ldr	r1, [pc, #12]	; (80042b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	08006a10 	.word	0x08006a10

080042b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042bc:	f7ff ffde 	bl	800427c <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0adb      	lsrs	r3, r3, #11
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	; (80042dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	08006a10 	.word	0x08006a10

080042e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <RCC_Delay+0x34>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <RCC_Delay+0x38>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0a5b      	lsrs	r3, r3, #9
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042fc:	bf00      	nop
  }
  while (Delay --);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1e5a      	subs	r2, r3, #1
 8004302:	60fa      	str	r2, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f9      	bne.n	80042fc <RCC_Delay+0x1c>
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	20000010 	.word	0x20000010
 8004318:	10624dd3 	.word	0x10624dd3

0800431c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d07d      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004338:	2300      	movs	r3, #0
 800433a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433c:	4b4f      	ldr	r3, [pc, #316]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10d      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004348:	4b4c      	ldr	r3, [pc, #304]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	4a4b      	ldr	r2, [pc, #300]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004352:	61d3      	str	r3, [r2, #28]
 8004354:	4b49      	ldr	r3, [pc, #292]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004360:	2301      	movs	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004364:	4b46      	ldr	r3, [pc, #280]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d118      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004370:	4b43      	ldr	r3, [pc, #268]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a42      	ldr	r2, [pc, #264]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437c:	f7fd ff1e 	bl	80021bc <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	e008      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004384:	f7fd ff1a 	bl	80021bc <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e06d      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004396:	4b3a      	ldr	r3, [pc, #232]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d02e      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d027      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043c0:	4b2e      	ldr	r3, [pc, #184]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ca:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043d0:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043d6:	4a29      	ldr	r2, [pc, #164]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d014      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fd fee9 	bl	80021bc <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	e00a      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fd fee5 	bl	80021bc <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e036      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ee      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004410:	4b1a      	ldr	r3, [pc, #104]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4917      	ldr	r1, [pc, #92]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441e:	4313      	orrs	r3, r2
 8004420:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d105      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004428:	4b14      	ldr	r3, [pc, #80]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	4a13      	ldr	r2, [pc, #76]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004432:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	490b      	ldr	r1, [pc, #44]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444e:	4313      	orrs	r3, r2
 8004450:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	4904      	ldr	r1, [pc, #16]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	40007000 	.word	0x40007000
 8004484:	42420440 	.word	0x42420440

08004488 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b08d      	sub	sp, #52	; 0x34
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004490:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004492:	f107 040c 	add.w	r4, r7, #12
 8004496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800449c:	f240 2301 	movw	r3, #513	; 0x201
 80044a0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	2300      	movs	r3, #0
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044aa:	2300      	movs	r3, #0
 80044ac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	2300      	movs	r3, #0
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b10      	cmp	r3, #16
 80044c0:	f200 808e 	bhi.w	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d049      	beq.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d079      	beq.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80044d0:	e086      	b.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80044d2:	4b49      	ldr	r3, [pc, #292]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80044d8:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d07f      	beq.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	0c9b      	lsrs	r3, r3, #18
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	3330      	adds	r3, #48	; 0x30
 80044ee:	443b      	add	r3, r7
 80044f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044f4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d017      	beq.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004500:	4b3d      	ldr	r3, [pc, #244]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0c5b      	lsrs	r3, r3, #17
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	3330      	adds	r3, #48	; 0x30
 800450c:	443b      	add	r3, r7
 800450e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00d      	beq.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800451e:	4a37      	ldr	r2, [pc, #220]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	fbb2 f2f3 	udiv	r2, r2, r3
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800452e:	e004      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	4a33      	ldr	r2, [pc, #204]	; (8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800453a:	4b2f      	ldr	r3, [pc, #188]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004546:	d102      	bne.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800454c:	e04a      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4a2c      	ldr	r2, [pc, #176]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800455c:	e042      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456e:	d108      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004580:	e01f      	b.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458c:	d109      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800458e:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800459a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a0:	e00f      	b.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ac:	d11c      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80045ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045c0:	e012      	b.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80045c2:	e011      	b.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80045c4:	f7ff fe78 	bl	80042b8 <HAL_RCC_GetPCLK2Freq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	0b9b      	lsrs	r3, r3, #14
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	3301      	adds	r3, #1
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045de:	e004      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80045e0:	bf00      	nop
 80045e2:	e002      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80045e4:	bf00      	nop
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80045e8:	bf00      	nop
    }
  }
  return (frequency);
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3734      	adds	r7, #52	; 0x34
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd90      	pop	{r4, r7, pc}
 80045f4:	08005528 	.word	0x08005528
 80045f8:	40021000 	.word	0x40021000
 80045fc:	007a1200 	.word	0x007a1200
 8004600:	003d0900 	.word	0x003d0900
 8004604:	aaaaaaab 	.word	0xaaaaaaab

08004608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e041      	b.n	800469e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd fcc4 	bl	8001fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f000 f93c 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d001      	beq.n	80046c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e032      	b.n	8004726 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_TIM_Base_Start+0x88>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_TIM_Base_Start+0x48>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046da:	d009      	beq.n	80046f0 <HAL_TIM_Base_Start+0x48>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <HAL_TIM_Base_Start+0x8c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_TIM_Base_Start+0x48>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <HAL_TIM_Base_Start+0x90>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d111      	bne.n	8004714 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d010      	beq.n	8004724 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	e007      	b.n	8004724 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800

0800473c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x18>
 8004750:	2302      	movs	r3, #2
 8004752:	e0b3      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x180>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800477a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478c:	d03e      	beq.n	800480c <HAL_TIM_ConfigClockSource+0xd0>
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004792:	f200 8087 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x168>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	f000 8085 	beq.w	80048a8 <HAL_TIM_ConfigClockSource+0x16c>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a2:	d87f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x168>
 80047a4:	2b70      	cmp	r3, #112	; 0x70
 80047a6:	d01a      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xa2>
 80047a8:	2b70      	cmp	r3, #112	; 0x70
 80047aa:	d87b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x168>
 80047ac:	2b60      	cmp	r3, #96	; 0x60
 80047ae:	d050      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x116>
 80047b0:	2b60      	cmp	r3, #96	; 0x60
 80047b2:	d877      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x168>
 80047b4:	2b50      	cmp	r3, #80	; 0x50
 80047b6:	d03c      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0xf6>
 80047b8:	2b50      	cmp	r3, #80	; 0x50
 80047ba:	d873      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x168>
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	d058      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x136>
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d86f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x168>
 80047c4:	2b30      	cmp	r3, #48	; 0x30
 80047c6:	d064      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x156>
 80047c8:	2b30      	cmp	r3, #48	; 0x30
 80047ca:	d86b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x168>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d060      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x156>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d867      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x168>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x156>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d05a      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047dc:	e062      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f000 f942 	bl	8004a76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004800:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	609a      	str	r2, [r3, #8]
      break;
 800480a:	e04e      	b.n	80048aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f000 f92b 	bl	8004a76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800482e:	609a      	str	r2, [r3, #8]
      break;
 8004830:	e03b      	b.n	80048aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f000 f8a2 	bl	8004988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2150      	movs	r1, #80	; 0x50
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f8f9 	bl	8004a42 <TIM_ITRx_SetConfig>
      break;
 8004850:	e02b      	b.n	80048aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	461a      	mov	r2, r3
 8004860:	f000 f8c0 	bl	80049e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2160      	movs	r1, #96	; 0x60
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f8e9 	bl	8004a42 <TIM_ITRx_SetConfig>
      break;
 8004870:	e01b      	b.n	80048aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	461a      	mov	r2, r3
 8004880:	f000 f882 	bl	8004988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2140      	movs	r1, #64	; 0x40
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f8d9 	bl	8004a42 <TIM_ITRx_SetConfig>
      break;
 8004890:	e00b      	b.n	80048aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f000 f8d0 	bl	8004a42 <TIM_ITRx_SetConfig>
        break;
 80048a2:	e002      	b.n	80048aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048a4:	bf00      	nop
 80048a6:	e000      	b.n	80048aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a29      	ldr	r2, [pc, #164]	; (800497c <TIM_Base_SetConfig+0xb8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00b      	beq.n	80048f4 <TIM_Base_SetConfig+0x30>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e2:	d007      	beq.n	80048f4 <TIM_Base_SetConfig+0x30>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a26      	ldr	r2, [pc, #152]	; (8004980 <TIM_Base_SetConfig+0xbc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_Base_SetConfig+0x30>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a25      	ldr	r2, [pc, #148]	; (8004984 <TIM_Base_SetConfig+0xc0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d108      	bne.n	8004906 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1c      	ldr	r2, [pc, #112]	; (800497c <TIM_Base_SetConfig+0xb8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00b      	beq.n	8004926 <TIM_Base_SetConfig+0x62>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d007      	beq.n	8004926 <TIM_Base_SetConfig+0x62>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a19      	ldr	r2, [pc, #100]	; (8004980 <TIM_Base_SetConfig+0xbc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_Base_SetConfig+0x62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a18      	ldr	r2, [pc, #96]	; (8004984 <TIM_Base_SetConfig+0xc0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d108      	bne.n	8004938 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a07      	ldr	r2, [pc, #28]	; (800497c <TIM_Base_SetConfig+0xb8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d103      	bne.n	800496c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	615a      	str	r2, [r3, #20]
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800

08004988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0201 	bic.w	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 030a 	bic.w	r3, r3, #10
 80049c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f023 0210 	bic.w	r2, r3, #16
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	031b      	lsls	r3, r3, #12
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f043 0307 	orr.w	r3, r3, #7
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	609a      	str	r2, [r3, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b087      	sub	sp, #28
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	021a      	lsls	r2, r3, #8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	609a      	str	r2, [r3, #8]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e046      	b.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a16      	ldr	r2, [pc, #88]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00e      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b18:	d009      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a12      	ldr	r2, [pc, #72]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a10      	ldr	r2, [pc, #64]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d10c      	bne.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800

08004b70 <__errno>:
 8004b70:	4b01      	ldr	r3, [pc, #4]	; (8004b78 <__errno+0x8>)
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	2000001c 	.word	0x2000001c

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	2600      	movs	r6, #0
 8004b80:	4d0c      	ldr	r5, [pc, #48]	; (8004bb4 <__libc_init_array+0x38>)
 8004b82:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	f000 fc9c 	bl	80054c8 <_init>
 8004b90:	2600      	movs	r6, #0
 8004b92:	4d0a      	ldr	r5, [pc, #40]	; (8004bbc <__libc_init_array+0x40>)
 8004b94:	4c0a      	ldr	r4, [pc, #40]	; (8004bc0 <__libc_init_array+0x44>)
 8004b96:	1b64      	subs	r4, r4, r5
 8004b98:	10a4      	asrs	r4, r4, #2
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08006a4c 	.word	0x08006a4c
 8004bb8:	08006a4c 	.word	0x08006a4c
 8004bbc:	08006a4c 	.word	0x08006a4c
 8004bc0:	08006a50 	.word	0x08006a50

08004bc4 <memset>:
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4402      	add	r2, r0
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d100      	bne.n	8004bce <memset+0xa>
 8004bcc:	4770      	bx	lr
 8004bce:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd2:	e7f9      	b.n	8004bc8 <memset+0x4>

08004bd4 <siprintf>:
 8004bd4:	b40e      	push	{r1, r2, r3}
 8004bd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bda:	b500      	push	{lr}
 8004bdc:	b09c      	sub	sp, #112	; 0x70
 8004bde:	ab1d      	add	r3, sp, #116	; 0x74
 8004be0:	9002      	str	r0, [sp, #8]
 8004be2:	9006      	str	r0, [sp, #24]
 8004be4:	9107      	str	r1, [sp, #28]
 8004be6:	9104      	str	r1, [sp, #16]
 8004be8:	4808      	ldr	r0, [pc, #32]	; (8004c0c <siprintf+0x38>)
 8004bea:	4909      	ldr	r1, [pc, #36]	; (8004c10 <siprintf+0x3c>)
 8004bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf0:	9105      	str	r1, [sp, #20]
 8004bf2:	6800      	ldr	r0, [r0, #0]
 8004bf4:	a902      	add	r1, sp, #8
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	f000 f868 	bl	8004ccc <_svfiprintf_r>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	9b02      	ldr	r3, [sp, #8]
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	b01c      	add	sp, #112	; 0x70
 8004c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c08:	b003      	add	sp, #12
 8004c0a:	4770      	bx	lr
 8004c0c:	2000001c 	.word	0x2000001c
 8004c10:	ffff0208 	.word	0xffff0208

08004c14 <__ssputs_r>:
 8004c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	688e      	ldr	r6, [r1, #8]
 8004c1a:	4682      	mov	sl, r0
 8004c1c:	429e      	cmp	r6, r3
 8004c1e:	460c      	mov	r4, r1
 8004c20:	4690      	mov	r8, r2
 8004c22:	461f      	mov	r7, r3
 8004c24:	d838      	bhi.n	8004c98 <__ssputs_r+0x84>
 8004c26:	898a      	ldrh	r2, [r1, #12]
 8004c28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c2c:	d032      	beq.n	8004c94 <__ssputs_r+0x80>
 8004c2e:	6825      	ldr	r5, [r4, #0]
 8004c30:	6909      	ldr	r1, [r1, #16]
 8004c32:	3301      	adds	r3, #1
 8004c34:	eba5 0901 	sub.w	r9, r5, r1
 8004c38:	6965      	ldr	r5, [r4, #20]
 8004c3a:	444b      	add	r3, r9
 8004c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c44:	106d      	asrs	r5, r5, #1
 8004c46:	429d      	cmp	r5, r3
 8004c48:	bf38      	it	cc
 8004c4a:	461d      	movcc	r5, r3
 8004c4c:	0553      	lsls	r3, r2, #21
 8004c4e:	d531      	bpl.n	8004cb4 <__ssputs_r+0xa0>
 8004c50:	4629      	mov	r1, r5
 8004c52:	f000 fb6f 	bl	8005334 <_malloc_r>
 8004c56:	4606      	mov	r6, r0
 8004c58:	b950      	cbnz	r0, 8004c70 <__ssputs_r+0x5c>
 8004c5a:	230c      	movs	r3, #12
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	f8ca 3000 	str.w	r3, [sl]
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c70:	464a      	mov	r2, r9
 8004c72:	6921      	ldr	r1, [r4, #16]
 8004c74:	f000 face 	bl	8005214 <memcpy>
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c82:	81a3      	strh	r3, [r4, #12]
 8004c84:	6126      	str	r6, [r4, #16]
 8004c86:	444e      	add	r6, r9
 8004c88:	6026      	str	r6, [r4, #0]
 8004c8a:	463e      	mov	r6, r7
 8004c8c:	6165      	str	r5, [r4, #20]
 8004c8e:	eba5 0509 	sub.w	r5, r5, r9
 8004c92:	60a5      	str	r5, [r4, #8]
 8004c94:	42be      	cmp	r6, r7
 8004c96:	d900      	bls.n	8004c9a <__ssputs_r+0x86>
 8004c98:	463e      	mov	r6, r7
 8004c9a:	4632      	mov	r2, r6
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	6820      	ldr	r0, [r4, #0]
 8004ca0:	f000 fac6 	bl	8005230 <memmove>
 8004ca4:	68a3      	ldr	r3, [r4, #8]
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	1b9b      	subs	r3, r3, r6
 8004caa:	60a3      	str	r3, [r4, #8]
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	4433      	add	r3, r6
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	e7db      	b.n	8004c6c <__ssputs_r+0x58>
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	f000 fbb1 	bl	800541c <_realloc_r>
 8004cba:	4606      	mov	r6, r0
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d1e1      	bne.n	8004c84 <__ssputs_r+0x70>
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	6921      	ldr	r1, [r4, #16]
 8004cc4:	f000 face 	bl	8005264 <_free_r>
 8004cc8:	e7c7      	b.n	8004c5a <__ssputs_r+0x46>
	...

08004ccc <_svfiprintf_r>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	4698      	mov	r8, r3
 8004cd2:	898b      	ldrh	r3, [r1, #12]
 8004cd4:	4607      	mov	r7, r0
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	460d      	mov	r5, r1
 8004cda:	4614      	mov	r4, r2
 8004cdc:	b09d      	sub	sp, #116	; 0x74
 8004cde:	d50e      	bpl.n	8004cfe <_svfiprintf_r+0x32>
 8004ce0:	690b      	ldr	r3, [r1, #16]
 8004ce2:	b963      	cbnz	r3, 8004cfe <_svfiprintf_r+0x32>
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	f000 fb25 	bl	8005334 <_malloc_r>
 8004cea:	6028      	str	r0, [r5, #0]
 8004cec:	6128      	str	r0, [r5, #16]
 8004cee:	b920      	cbnz	r0, 8004cfa <_svfiprintf_r+0x2e>
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e0d1      	b.n	8004e9e <_svfiprintf_r+0x1d2>
 8004cfa:	2340      	movs	r3, #64	; 0x40
 8004cfc:	616b      	str	r3, [r5, #20]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9309      	str	r3, [sp, #36]	; 0x24
 8004d02:	2320      	movs	r3, #32
 8004d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d08:	2330      	movs	r3, #48	; 0x30
 8004d0a:	f04f 0901 	mov.w	r9, #1
 8004d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004eb8 <_svfiprintf_r+0x1ec>
 8004d16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	469a      	mov	sl, r3
 8004d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d22:	b10a      	cbz	r2, 8004d28 <_svfiprintf_r+0x5c>
 8004d24:	2a25      	cmp	r2, #37	; 0x25
 8004d26:	d1f9      	bne.n	8004d1c <_svfiprintf_r+0x50>
 8004d28:	ebba 0b04 	subs.w	fp, sl, r4
 8004d2c:	d00b      	beq.n	8004d46 <_svfiprintf_r+0x7a>
 8004d2e:	465b      	mov	r3, fp
 8004d30:	4622      	mov	r2, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	4638      	mov	r0, r7
 8004d36:	f7ff ff6d 	bl	8004c14 <__ssputs_r>
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	f000 80aa 	beq.w	8004e94 <_svfiprintf_r+0x1c8>
 8004d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d42:	445a      	add	r2, fp
 8004d44:	9209      	str	r2, [sp, #36]	; 0x24
 8004d46:	f89a 3000 	ldrb.w	r3, [sl]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80a2 	beq.w	8004e94 <_svfiprintf_r+0x1c8>
 8004d50:	2300      	movs	r3, #0
 8004d52:	f04f 32ff 	mov.w	r2, #4294967295
 8004d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d5a:	f10a 0a01 	add.w	sl, sl, #1
 8004d5e:	9304      	str	r3, [sp, #16]
 8004d60:	9307      	str	r3, [sp, #28]
 8004d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d66:	931a      	str	r3, [sp, #104]	; 0x68
 8004d68:	4654      	mov	r4, sl
 8004d6a:	2205      	movs	r2, #5
 8004d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d70:	4851      	ldr	r0, [pc, #324]	; (8004eb8 <_svfiprintf_r+0x1ec>)
 8004d72:	f000 fa41 	bl	80051f8 <memchr>
 8004d76:	9a04      	ldr	r2, [sp, #16]
 8004d78:	b9d8      	cbnz	r0, 8004db2 <_svfiprintf_r+0xe6>
 8004d7a:	06d0      	lsls	r0, r2, #27
 8004d7c:	bf44      	itt	mi
 8004d7e:	2320      	movmi	r3, #32
 8004d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d84:	0711      	lsls	r1, r2, #28
 8004d86:	bf44      	itt	mi
 8004d88:	232b      	movmi	r3, #43	; 0x2b
 8004d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d92:	2b2a      	cmp	r3, #42	; 0x2a
 8004d94:	d015      	beq.n	8004dc2 <_svfiprintf_r+0xf6>
 8004d96:	4654      	mov	r4, sl
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f04f 0c0a 	mov.w	ip, #10
 8004d9e:	9a07      	ldr	r2, [sp, #28]
 8004da0:	4621      	mov	r1, r4
 8004da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004da6:	3b30      	subs	r3, #48	; 0x30
 8004da8:	2b09      	cmp	r3, #9
 8004daa:	d94e      	bls.n	8004e4a <_svfiprintf_r+0x17e>
 8004dac:	b1b0      	cbz	r0, 8004ddc <_svfiprintf_r+0x110>
 8004dae:	9207      	str	r2, [sp, #28]
 8004db0:	e014      	b.n	8004ddc <_svfiprintf_r+0x110>
 8004db2:	eba0 0308 	sub.w	r3, r0, r8
 8004db6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	46a2      	mov	sl, r4
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	e7d2      	b.n	8004d68 <_svfiprintf_r+0x9c>
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	1d19      	adds	r1, r3, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	9103      	str	r1, [sp, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bfbb      	ittet	lt
 8004dce:	425b      	neglt	r3, r3
 8004dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8004dd4:	9307      	strge	r3, [sp, #28]
 8004dd6:	9307      	strlt	r3, [sp, #28]
 8004dd8:	bfb8      	it	lt
 8004dda:	9204      	strlt	r2, [sp, #16]
 8004ddc:	7823      	ldrb	r3, [r4, #0]
 8004dde:	2b2e      	cmp	r3, #46	; 0x2e
 8004de0:	d10c      	bne.n	8004dfc <_svfiprintf_r+0x130>
 8004de2:	7863      	ldrb	r3, [r4, #1]
 8004de4:	2b2a      	cmp	r3, #42	; 0x2a
 8004de6:	d135      	bne.n	8004e54 <_svfiprintf_r+0x188>
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	3402      	adds	r4, #2
 8004dec:	1d1a      	adds	r2, r3, #4
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	9203      	str	r2, [sp, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bfb8      	it	lt
 8004df6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dfa:	9305      	str	r3, [sp, #20]
 8004dfc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004ebc <_svfiprintf_r+0x1f0>
 8004e00:	2203      	movs	r2, #3
 8004e02:	4650      	mov	r0, sl
 8004e04:	7821      	ldrb	r1, [r4, #0]
 8004e06:	f000 f9f7 	bl	80051f8 <memchr>
 8004e0a:	b140      	cbz	r0, 8004e1e <_svfiprintf_r+0x152>
 8004e0c:	2340      	movs	r3, #64	; 0x40
 8004e0e:	eba0 000a 	sub.w	r0, r0, sl
 8004e12:	fa03 f000 	lsl.w	r0, r3, r0
 8004e16:	9b04      	ldr	r3, [sp, #16]
 8004e18:	3401      	adds	r4, #1
 8004e1a:	4303      	orrs	r3, r0
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e22:	2206      	movs	r2, #6
 8004e24:	4826      	ldr	r0, [pc, #152]	; (8004ec0 <_svfiprintf_r+0x1f4>)
 8004e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e2a:	f000 f9e5 	bl	80051f8 <memchr>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d038      	beq.n	8004ea4 <_svfiprintf_r+0x1d8>
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <_svfiprintf_r+0x1f8>)
 8004e34:	bb1b      	cbnz	r3, 8004e7e <_svfiprintf_r+0x1b2>
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	3307      	adds	r3, #7
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
 8004e3e:	3308      	adds	r3, #8
 8004e40:	9303      	str	r3, [sp, #12]
 8004e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e44:	4433      	add	r3, r6
 8004e46:	9309      	str	r3, [sp, #36]	; 0x24
 8004e48:	e767      	b.n	8004d1a <_svfiprintf_r+0x4e>
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e52:	e7a5      	b.n	8004da0 <_svfiprintf_r+0xd4>
 8004e54:	2300      	movs	r3, #0
 8004e56:	f04f 0c0a 	mov.w	ip, #10
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	3401      	adds	r4, #1
 8004e5e:	9305      	str	r3, [sp, #20]
 8004e60:	4620      	mov	r0, r4
 8004e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e66:	3a30      	subs	r2, #48	; 0x30
 8004e68:	2a09      	cmp	r2, #9
 8004e6a:	d903      	bls.n	8004e74 <_svfiprintf_r+0x1a8>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0c5      	beq.n	8004dfc <_svfiprintf_r+0x130>
 8004e70:	9105      	str	r1, [sp, #20]
 8004e72:	e7c3      	b.n	8004dfc <_svfiprintf_r+0x130>
 8004e74:	4604      	mov	r4, r0
 8004e76:	2301      	movs	r3, #1
 8004e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e7c:	e7f0      	b.n	8004e60 <_svfiprintf_r+0x194>
 8004e7e:	ab03      	add	r3, sp, #12
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	462a      	mov	r2, r5
 8004e84:	4638      	mov	r0, r7
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <_svfiprintf_r+0x1fc>)
 8004e88:	a904      	add	r1, sp, #16
 8004e8a:	f3af 8000 	nop.w
 8004e8e:	1c42      	adds	r2, r0, #1
 8004e90:	4606      	mov	r6, r0
 8004e92:	d1d6      	bne.n	8004e42 <_svfiprintf_r+0x176>
 8004e94:	89ab      	ldrh	r3, [r5, #12]
 8004e96:	065b      	lsls	r3, r3, #25
 8004e98:	f53f af2c 	bmi.w	8004cf4 <_svfiprintf_r+0x28>
 8004e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e9e:	b01d      	add	sp, #116	; 0x74
 8004ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea4:	ab03      	add	r3, sp, #12
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	462a      	mov	r2, r5
 8004eaa:	4638      	mov	r0, r7
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <_svfiprintf_r+0x1fc>)
 8004eae:	a904      	add	r1, sp, #16
 8004eb0:	f000 f87c 	bl	8004fac <_printf_i>
 8004eb4:	e7eb      	b.n	8004e8e <_svfiprintf_r+0x1c2>
 8004eb6:	bf00      	nop
 8004eb8:	08006a18 	.word	0x08006a18
 8004ebc:	08006a1e 	.word	0x08006a1e
 8004ec0:	08006a22 	.word	0x08006a22
 8004ec4:	00000000 	.word	0x00000000
 8004ec8:	08004c15 	.word	0x08004c15

08004ecc <_printf_common>:
 8004ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	4699      	mov	r9, r3
 8004ed4:	688a      	ldr	r2, [r1, #8]
 8004ed6:	690b      	ldr	r3, [r1, #16]
 8004ed8:	4607      	mov	r7, r0
 8004eda:	4293      	cmp	r3, r2
 8004edc:	bfb8      	it	lt
 8004ede:	4613      	movlt	r3, r2
 8004ee0:	6033      	str	r3, [r6, #0]
 8004ee2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eec:	b10a      	cbz	r2, 8004ef2 <_printf_common+0x26>
 8004eee:	3301      	adds	r3, #1
 8004ef0:	6033      	str	r3, [r6, #0]
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	0699      	lsls	r1, r3, #26
 8004ef6:	bf42      	ittt	mi
 8004ef8:	6833      	ldrmi	r3, [r6, #0]
 8004efa:	3302      	addmi	r3, #2
 8004efc:	6033      	strmi	r3, [r6, #0]
 8004efe:	6825      	ldr	r5, [r4, #0]
 8004f00:	f015 0506 	ands.w	r5, r5, #6
 8004f04:	d106      	bne.n	8004f14 <_printf_common+0x48>
 8004f06:	f104 0a19 	add.w	sl, r4, #25
 8004f0a:	68e3      	ldr	r3, [r4, #12]
 8004f0c:	6832      	ldr	r2, [r6, #0]
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	42ab      	cmp	r3, r5
 8004f12:	dc28      	bgt.n	8004f66 <_printf_common+0x9a>
 8004f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f18:	1e13      	subs	r3, r2, #0
 8004f1a:	6822      	ldr	r2, [r4, #0]
 8004f1c:	bf18      	it	ne
 8004f1e:	2301      	movne	r3, #1
 8004f20:	0692      	lsls	r2, r2, #26
 8004f22:	d42d      	bmi.n	8004f80 <_printf_common+0xb4>
 8004f24:	4649      	mov	r1, r9
 8004f26:	4638      	mov	r0, r7
 8004f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f2c:	47c0      	blx	r8
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d020      	beq.n	8004f74 <_printf_common+0xa8>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	68e5      	ldr	r5, [r4, #12]
 8004f36:	f003 0306 	and.w	r3, r3, #6
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	bf18      	it	ne
 8004f3e:	2500      	movne	r5, #0
 8004f40:	6832      	ldr	r2, [r6, #0]
 8004f42:	f04f 0600 	mov.w	r6, #0
 8004f46:	68a3      	ldr	r3, [r4, #8]
 8004f48:	bf08      	it	eq
 8004f4a:	1aad      	subeq	r5, r5, r2
 8004f4c:	6922      	ldr	r2, [r4, #16]
 8004f4e:	bf08      	it	eq
 8004f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f54:	4293      	cmp	r3, r2
 8004f56:	bfc4      	itt	gt
 8004f58:	1a9b      	subgt	r3, r3, r2
 8004f5a:	18ed      	addgt	r5, r5, r3
 8004f5c:	341a      	adds	r4, #26
 8004f5e:	42b5      	cmp	r5, r6
 8004f60:	d11a      	bne.n	8004f98 <_printf_common+0xcc>
 8004f62:	2000      	movs	r0, #0
 8004f64:	e008      	b.n	8004f78 <_printf_common+0xac>
 8004f66:	2301      	movs	r3, #1
 8004f68:	4652      	mov	r2, sl
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	47c0      	blx	r8
 8004f70:	3001      	adds	r0, #1
 8004f72:	d103      	bne.n	8004f7c <_printf_common+0xb0>
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7c:	3501      	adds	r5, #1
 8004f7e:	e7c4      	b.n	8004f0a <_printf_common+0x3e>
 8004f80:	2030      	movs	r0, #48	; 0x30
 8004f82:	18e1      	adds	r1, r4, r3
 8004f84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f8e:	4422      	add	r2, r4
 8004f90:	3302      	adds	r3, #2
 8004f92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f96:	e7c5      	b.n	8004f24 <_printf_common+0x58>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	47c0      	blx	r8
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d0e6      	beq.n	8004f74 <_printf_common+0xa8>
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7d9      	b.n	8004f5e <_printf_common+0x92>
	...

08004fac <_printf_i>:
 8004fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb0:	7e0f      	ldrb	r7, [r1, #24]
 8004fb2:	4691      	mov	r9, r2
 8004fb4:	2f78      	cmp	r7, #120	; 0x78
 8004fb6:	4680      	mov	r8, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	469a      	mov	sl, r3
 8004fbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fc2:	d807      	bhi.n	8004fd4 <_printf_i+0x28>
 8004fc4:	2f62      	cmp	r7, #98	; 0x62
 8004fc6:	d80a      	bhi.n	8004fde <_printf_i+0x32>
 8004fc8:	2f00      	cmp	r7, #0
 8004fca:	f000 80d9 	beq.w	8005180 <_printf_i+0x1d4>
 8004fce:	2f58      	cmp	r7, #88	; 0x58
 8004fd0:	f000 80a4 	beq.w	800511c <_printf_i+0x170>
 8004fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fdc:	e03a      	b.n	8005054 <_printf_i+0xa8>
 8004fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fe2:	2b15      	cmp	r3, #21
 8004fe4:	d8f6      	bhi.n	8004fd4 <_printf_i+0x28>
 8004fe6:	a101      	add	r1, pc, #4	; (adr r1, 8004fec <_printf_i+0x40>)
 8004fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fec:	08005045 	.word	0x08005045
 8004ff0:	08005059 	.word	0x08005059
 8004ff4:	08004fd5 	.word	0x08004fd5
 8004ff8:	08004fd5 	.word	0x08004fd5
 8004ffc:	08004fd5 	.word	0x08004fd5
 8005000:	08004fd5 	.word	0x08004fd5
 8005004:	08005059 	.word	0x08005059
 8005008:	08004fd5 	.word	0x08004fd5
 800500c:	08004fd5 	.word	0x08004fd5
 8005010:	08004fd5 	.word	0x08004fd5
 8005014:	08004fd5 	.word	0x08004fd5
 8005018:	08005167 	.word	0x08005167
 800501c:	08005089 	.word	0x08005089
 8005020:	08005149 	.word	0x08005149
 8005024:	08004fd5 	.word	0x08004fd5
 8005028:	08004fd5 	.word	0x08004fd5
 800502c:	08005189 	.word	0x08005189
 8005030:	08004fd5 	.word	0x08004fd5
 8005034:	08005089 	.word	0x08005089
 8005038:	08004fd5 	.word	0x08004fd5
 800503c:	08004fd5 	.word	0x08004fd5
 8005040:	08005151 	.word	0x08005151
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	1d1a      	adds	r2, r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	602a      	str	r2, [r5, #0]
 800504c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005054:	2301      	movs	r3, #1
 8005056:	e0a4      	b.n	80051a2 <_printf_i+0x1f6>
 8005058:	6820      	ldr	r0, [r4, #0]
 800505a:	6829      	ldr	r1, [r5, #0]
 800505c:	0606      	lsls	r6, r0, #24
 800505e:	f101 0304 	add.w	r3, r1, #4
 8005062:	d50a      	bpl.n	800507a <_printf_i+0xce>
 8005064:	680e      	ldr	r6, [r1, #0]
 8005066:	602b      	str	r3, [r5, #0]
 8005068:	2e00      	cmp	r6, #0
 800506a:	da03      	bge.n	8005074 <_printf_i+0xc8>
 800506c:	232d      	movs	r3, #45	; 0x2d
 800506e:	4276      	negs	r6, r6
 8005070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005074:	230a      	movs	r3, #10
 8005076:	485e      	ldr	r0, [pc, #376]	; (80051f0 <_printf_i+0x244>)
 8005078:	e019      	b.n	80050ae <_printf_i+0x102>
 800507a:	680e      	ldr	r6, [r1, #0]
 800507c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	bf18      	it	ne
 8005084:	b236      	sxthne	r6, r6
 8005086:	e7ef      	b.n	8005068 <_printf_i+0xbc>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	1d19      	adds	r1, r3, #4
 800508e:	6029      	str	r1, [r5, #0]
 8005090:	0601      	lsls	r1, r0, #24
 8005092:	d501      	bpl.n	8005098 <_printf_i+0xec>
 8005094:	681e      	ldr	r6, [r3, #0]
 8005096:	e002      	b.n	800509e <_printf_i+0xf2>
 8005098:	0646      	lsls	r6, r0, #25
 800509a:	d5fb      	bpl.n	8005094 <_printf_i+0xe8>
 800509c:	881e      	ldrh	r6, [r3, #0]
 800509e:	2f6f      	cmp	r7, #111	; 0x6f
 80050a0:	bf0c      	ite	eq
 80050a2:	2308      	moveq	r3, #8
 80050a4:	230a      	movne	r3, #10
 80050a6:	4852      	ldr	r0, [pc, #328]	; (80051f0 <_printf_i+0x244>)
 80050a8:	2100      	movs	r1, #0
 80050aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ae:	6865      	ldr	r5, [r4, #4]
 80050b0:	2d00      	cmp	r5, #0
 80050b2:	bfa8      	it	ge
 80050b4:	6821      	ldrge	r1, [r4, #0]
 80050b6:	60a5      	str	r5, [r4, #8]
 80050b8:	bfa4      	itt	ge
 80050ba:	f021 0104 	bicge.w	r1, r1, #4
 80050be:	6021      	strge	r1, [r4, #0]
 80050c0:	b90e      	cbnz	r6, 80050c6 <_printf_i+0x11a>
 80050c2:	2d00      	cmp	r5, #0
 80050c4:	d04d      	beq.n	8005162 <_printf_i+0x1b6>
 80050c6:	4615      	mov	r5, r2
 80050c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80050cc:	fb03 6711 	mls	r7, r3, r1, r6
 80050d0:	5dc7      	ldrb	r7, [r0, r7]
 80050d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050d6:	4637      	mov	r7, r6
 80050d8:	42bb      	cmp	r3, r7
 80050da:	460e      	mov	r6, r1
 80050dc:	d9f4      	bls.n	80050c8 <_printf_i+0x11c>
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d10b      	bne.n	80050fa <_printf_i+0x14e>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	07de      	lsls	r6, r3, #31
 80050e6:	d508      	bpl.n	80050fa <_printf_i+0x14e>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	6861      	ldr	r1, [r4, #4]
 80050ec:	4299      	cmp	r1, r3
 80050ee:	bfde      	ittt	le
 80050f0:	2330      	movle	r3, #48	; 0x30
 80050f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050fa:	1b52      	subs	r2, r2, r5
 80050fc:	6122      	str	r2, [r4, #16]
 80050fe:	464b      	mov	r3, r9
 8005100:	4621      	mov	r1, r4
 8005102:	4640      	mov	r0, r8
 8005104:	f8cd a000 	str.w	sl, [sp]
 8005108:	aa03      	add	r2, sp, #12
 800510a:	f7ff fedf 	bl	8004ecc <_printf_common>
 800510e:	3001      	adds	r0, #1
 8005110:	d14c      	bne.n	80051ac <_printf_i+0x200>
 8005112:	f04f 30ff 	mov.w	r0, #4294967295
 8005116:	b004      	add	sp, #16
 8005118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511c:	4834      	ldr	r0, [pc, #208]	; (80051f0 <_printf_i+0x244>)
 800511e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005122:	6829      	ldr	r1, [r5, #0]
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	f851 6b04 	ldr.w	r6, [r1], #4
 800512a:	6029      	str	r1, [r5, #0]
 800512c:	061d      	lsls	r5, r3, #24
 800512e:	d514      	bpl.n	800515a <_printf_i+0x1ae>
 8005130:	07df      	lsls	r7, r3, #31
 8005132:	bf44      	itt	mi
 8005134:	f043 0320 	orrmi.w	r3, r3, #32
 8005138:	6023      	strmi	r3, [r4, #0]
 800513a:	b91e      	cbnz	r6, 8005144 <_printf_i+0x198>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	f023 0320 	bic.w	r3, r3, #32
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	2310      	movs	r3, #16
 8005146:	e7af      	b.n	80050a8 <_printf_i+0xfc>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	f043 0320 	orr.w	r3, r3, #32
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	2378      	movs	r3, #120	; 0x78
 8005152:	4828      	ldr	r0, [pc, #160]	; (80051f4 <_printf_i+0x248>)
 8005154:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005158:	e7e3      	b.n	8005122 <_printf_i+0x176>
 800515a:	0659      	lsls	r1, r3, #25
 800515c:	bf48      	it	mi
 800515e:	b2b6      	uxthmi	r6, r6
 8005160:	e7e6      	b.n	8005130 <_printf_i+0x184>
 8005162:	4615      	mov	r5, r2
 8005164:	e7bb      	b.n	80050de <_printf_i+0x132>
 8005166:	682b      	ldr	r3, [r5, #0]
 8005168:	6826      	ldr	r6, [r4, #0]
 800516a:	1d18      	adds	r0, r3, #4
 800516c:	6961      	ldr	r1, [r4, #20]
 800516e:	6028      	str	r0, [r5, #0]
 8005170:	0635      	lsls	r5, r6, #24
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	d501      	bpl.n	800517a <_printf_i+0x1ce>
 8005176:	6019      	str	r1, [r3, #0]
 8005178:	e002      	b.n	8005180 <_printf_i+0x1d4>
 800517a:	0670      	lsls	r0, r6, #25
 800517c:	d5fb      	bpl.n	8005176 <_printf_i+0x1ca>
 800517e:	8019      	strh	r1, [r3, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	4615      	mov	r5, r2
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	e7ba      	b.n	80050fe <_printf_i+0x152>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	2100      	movs	r1, #0
 800518c:	1d1a      	adds	r2, r3, #4
 800518e:	602a      	str	r2, [r5, #0]
 8005190:	681d      	ldr	r5, [r3, #0]
 8005192:	6862      	ldr	r2, [r4, #4]
 8005194:	4628      	mov	r0, r5
 8005196:	f000 f82f 	bl	80051f8 <memchr>
 800519a:	b108      	cbz	r0, 80051a0 <_printf_i+0x1f4>
 800519c:	1b40      	subs	r0, r0, r5
 800519e:	6060      	str	r0, [r4, #4]
 80051a0:	6863      	ldr	r3, [r4, #4]
 80051a2:	6123      	str	r3, [r4, #16]
 80051a4:	2300      	movs	r3, #0
 80051a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051aa:	e7a8      	b.n	80050fe <_printf_i+0x152>
 80051ac:	462a      	mov	r2, r5
 80051ae:	4649      	mov	r1, r9
 80051b0:	4640      	mov	r0, r8
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	47d0      	blx	sl
 80051b6:	3001      	adds	r0, #1
 80051b8:	d0ab      	beq.n	8005112 <_printf_i+0x166>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	079b      	lsls	r3, r3, #30
 80051be:	d413      	bmi.n	80051e8 <_printf_i+0x23c>
 80051c0:	68e0      	ldr	r0, [r4, #12]
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	4298      	cmp	r0, r3
 80051c6:	bfb8      	it	lt
 80051c8:	4618      	movlt	r0, r3
 80051ca:	e7a4      	b.n	8005116 <_printf_i+0x16a>
 80051cc:	2301      	movs	r3, #1
 80051ce:	4632      	mov	r2, r6
 80051d0:	4649      	mov	r1, r9
 80051d2:	4640      	mov	r0, r8
 80051d4:	47d0      	blx	sl
 80051d6:	3001      	adds	r0, #1
 80051d8:	d09b      	beq.n	8005112 <_printf_i+0x166>
 80051da:	3501      	adds	r5, #1
 80051dc:	68e3      	ldr	r3, [r4, #12]
 80051de:	9903      	ldr	r1, [sp, #12]
 80051e0:	1a5b      	subs	r3, r3, r1
 80051e2:	42ab      	cmp	r3, r5
 80051e4:	dcf2      	bgt.n	80051cc <_printf_i+0x220>
 80051e6:	e7eb      	b.n	80051c0 <_printf_i+0x214>
 80051e8:	2500      	movs	r5, #0
 80051ea:	f104 0619 	add.w	r6, r4, #25
 80051ee:	e7f5      	b.n	80051dc <_printf_i+0x230>
 80051f0:	08006a29 	.word	0x08006a29
 80051f4:	08006a3a 	.word	0x08006a3a

080051f8 <memchr>:
 80051f8:	4603      	mov	r3, r0
 80051fa:	b510      	push	{r4, lr}
 80051fc:	b2c9      	uxtb	r1, r1
 80051fe:	4402      	add	r2, r0
 8005200:	4293      	cmp	r3, r2
 8005202:	4618      	mov	r0, r3
 8005204:	d101      	bne.n	800520a <memchr+0x12>
 8005206:	2000      	movs	r0, #0
 8005208:	e003      	b.n	8005212 <memchr+0x1a>
 800520a:	7804      	ldrb	r4, [r0, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	428c      	cmp	r4, r1
 8005210:	d1f6      	bne.n	8005200 <memchr+0x8>
 8005212:	bd10      	pop	{r4, pc}

08005214 <memcpy>:
 8005214:	440a      	add	r2, r1
 8005216:	4291      	cmp	r1, r2
 8005218:	f100 33ff 	add.w	r3, r0, #4294967295
 800521c:	d100      	bne.n	8005220 <memcpy+0xc>
 800521e:	4770      	bx	lr
 8005220:	b510      	push	{r4, lr}
 8005222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005226:	4291      	cmp	r1, r2
 8005228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800522c:	d1f9      	bne.n	8005222 <memcpy+0xe>
 800522e:	bd10      	pop	{r4, pc}

08005230 <memmove>:
 8005230:	4288      	cmp	r0, r1
 8005232:	b510      	push	{r4, lr}
 8005234:	eb01 0402 	add.w	r4, r1, r2
 8005238:	d902      	bls.n	8005240 <memmove+0x10>
 800523a:	4284      	cmp	r4, r0
 800523c:	4623      	mov	r3, r4
 800523e:	d807      	bhi.n	8005250 <memmove+0x20>
 8005240:	1e43      	subs	r3, r0, #1
 8005242:	42a1      	cmp	r1, r4
 8005244:	d008      	beq.n	8005258 <memmove+0x28>
 8005246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800524a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800524e:	e7f8      	b.n	8005242 <memmove+0x12>
 8005250:	4601      	mov	r1, r0
 8005252:	4402      	add	r2, r0
 8005254:	428a      	cmp	r2, r1
 8005256:	d100      	bne.n	800525a <memmove+0x2a>
 8005258:	bd10      	pop	{r4, pc}
 800525a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800525e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005262:	e7f7      	b.n	8005254 <memmove+0x24>

08005264 <_free_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4605      	mov	r5, r0
 8005268:	2900      	cmp	r1, #0
 800526a:	d040      	beq.n	80052ee <_free_r+0x8a>
 800526c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005270:	1f0c      	subs	r4, r1, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	bfb8      	it	lt
 8005276:	18e4      	addlt	r4, r4, r3
 8005278:	f000 f910 	bl	800549c <__malloc_lock>
 800527c:	4a1c      	ldr	r2, [pc, #112]	; (80052f0 <_free_r+0x8c>)
 800527e:	6813      	ldr	r3, [r2, #0]
 8005280:	b933      	cbnz	r3, 8005290 <_free_r+0x2c>
 8005282:	6063      	str	r3, [r4, #4]
 8005284:	6014      	str	r4, [r2, #0]
 8005286:	4628      	mov	r0, r5
 8005288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800528c:	f000 b90c 	b.w	80054a8 <__malloc_unlock>
 8005290:	42a3      	cmp	r3, r4
 8005292:	d908      	bls.n	80052a6 <_free_r+0x42>
 8005294:	6820      	ldr	r0, [r4, #0]
 8005296:	1821      	adds	r1, r4, r0
 8005298:	428b      	cmp	r3, r1
 800529a:	bf01      	itttt	eq
 800529c:	6819      	ldreq	r1, [r3, #0]
 800529e:	685b      	ldreq	r3, [r3, #4]
 80052a0:	1809      	addeq	r1, r1, r0
 80052a2:	6021      	streq	r1, [r4, #0]
 80052a4:	e7ed      	b.n	8005282 <_free_r+0x1e>
 80052a6:	461a      	mov	r2, r3
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b10b      	cbz	r3, 80052b0 <_free_r+0x4c>
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	d9fa      	bls.n	80052a6 <_free_r+0x42>
 80052b0:	6811      	ldr	r1, [r2, #0]
 80052b2:	1850      	adds	r0, r2, r1
 80052b4:	42a0      	cmp	r0, r4
 80052b6:	d10b      	bne.n	80052d0 <_free_r+0x6c>
 80052b8:	6820      	ldr	r0, [r4, #0]
 80052ba:	4401      	add	r1, r0
 80052bc:	1850      	adds	r0, r2, r1
 80052be:	4283      	cmp	r3, r0
 80052c0:	6011      	str	r1, [r2, #0]
 80052c2:	d1e0      	bne.n	8005286 <_free_r+0x22>
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4401      	add	r1, r0
 80052ca:	6011      	str	r1, [r2, #0]
 80052cc:	6053      	str	r3, [r2, #4]
 80052ce:	e7da      	b.n	8005286 <_free_r+0x22>
 80052d0:	d902      	bls.n	80052d8 <_free_r+0x74>
 80052d2:	230c      	movs	r3, #12
 80052d4:	602b      	str	r3, [r5, #0]
 80052d6:	e7d6      	b.n	8005286 <_free_r+0x22>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	1821      	adds	r1, r4, r0
 80052dc:	428b      	cmp	r3, r1
 80052de:	bf01      	itttt	eq
 80052e0:	6819      	ldreq	r1, [r3, #0]
 80052e2:	685b      	ldreq	r3, [r3, #4]
 80052e4:	1809      	addeq	r1, r1, r0
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	6063      	str	r3, [r4, #4]
 80052ea:	6054      	str	r4, [r2, #4]
 80052ec:	e7cb      	b.n	8005286 <_free_r+0x22>
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	200005e4 	.word	0x200005e4

080052f4 <sbrk_aligned>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	4e0e      	ldr	r6, [pc, #56]	; (8005330 <sbrk_aligned+0x3c>)
 80052f8:	460c      	mov	r4, r1
 80052fa:	6831      	ldr	r1, [r6, #0]
 80052fc:	4605      	mov	r5, r0
 80052fe:	b911      	cbnz	r1, 8005306 <sbrk_aligned+0x12>
 8005300:	f000 f8bc 	bl	800547c <_sbrk_r>
 8005304:	6030      	str	r0, [r6, #0]
 8005306:	4621      	mov	r1, r4
 8005308:	4628      	mov	r0, r5
 800530a:	f000 f8b7 	bl	800547c <_sbrk_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	d00a      	beq.n	8005328 <sbrk_aligned+0x34>
 8005312:	1cc4      	adds	r4, r0, #3
 8005314:	f024 0403 	bic.w	r4, r4, #3
 8005318:	42a0      	cmp	r0, r4
 800531a:	d007      	beq.n	800532c <sbrk_aligned+0x38>
 800531c:	1a21      	subs	r1, r4, r0
 800531e:	4628      	mov	r0, r5
 8005320:	f000 f8ac 	bl	800547c <_sbrk_r>
 8005324:	3001      	adds	r0, #1
 8005326:	d101      	bne.n	800532c <sbrk_aligned+0x38>
 8005328:	f04f 34ff 	mov.w	r4, #4294967295
 800532c:	4620      	mov	r0, r4
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	200005e8 	.word	0x200005e8

08005334 <_malloc_r>:
 8005334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005338:	1ccd      	adds	r5, r1, #3
 800533a:	f025 0503 	bic.w	r5, r5, #3
 800533e:	3508      	adds	r5, #8
 8005340:	2d0c      	cmp	r5, #12
 8005342:	bf38      	it	cc
 8005344:	250c      	movcc	r5, #12
 8005346:	2d00      	cmp	r5, #0
 8005348:	4607      	mov	r7, r0
 800534a:	db01      	blt.n	8005350 <_malloc_r+0x1c>
 800534c:	42a9      	cmp	r1, r5
 800534e:	d905      	bls.n	800535c <_malloc_r+0x28>
 8005350:	230c      	movs	r3, #12
 8005352:	2600      	movs	r6, #0
 8005354:	603b      	str	r3, [r7, #0]
 8005356:	4630      	mov	r0, r6
 8005358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800535c:	4e2e      	ldr	r6, [pc, #184]	; (8005418 <_malloc_r+0xe4>)
 800535e:	f000 f89d 	bl	800549c <__malloc_lock>
 8005362:	6833      	ldr	r3, [r6, #0]
 8005364:	461c      	mov	r4, r3
 8005366:	bb34      	cbnz	r4, 80053b6 <_malloc_r+0x82>
 8005368:	4629      	mov	r1, r5
 800536a:	4638      	mov	r0, r7
 800536c:	f7ff ffc2 	bl	80052f4 <sbrk_aligned>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	4604      	mov	r4, r0
 8005374:	d14d      	bne.n	8005412 <_malloc_r+0xde>
 8005376:	6834      	ldr	r4, [r6, #0]
 8005378:	4626      	mov	r6, r4
 800537a:	2e00      	cmp	r6, #0
 800537c:	d140      	bne.n	8005400 <_malloc_r+0xcc>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	4631      	mov	r1, r6
 8005382:	4638      	mov	r0, r7
 8005384:	eb04 0803 	add.w	r8, r4, r3
 8005388:	f000 f878 	bl	800547c <_sbrk_r>
 800538c:	4580      	cmp	r8, r0
 800538e:	d13a      	bne.n	8005406 <_malloc_r+0xd2>
 8005390:	6821      	ldr	r1, [r4, #0]
 8005392:	3503      	adds	r5, #3
 8005394:	1a6d      	subs	r5, r5, r1
 8005396:	f025 0503 	bic.w	r5, r5, #3
 800539a:	3508      	adds	r5, #8
 800539c:	2d0c      	cmp	r5, #12
 800539e:	bf38      	it	cc
 80053a0:	250c      	movcc	r5, #12
 80053a2:	4638      	mov	r0, r7
 80053a4:	4629      	mov	r1, r5
 80053a6:	f7ff ffa5 	bl	80052f4 <sbrk_aligned>
 80053aa:	3001      	adds	r0, #1
 80053ac:	d02b      	beq.n	8005406 <_malloc_r+0xd2>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	442b      	add	r3, r5
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	e00e      	b.n	80053d4 <_malloc_r+0xa0>
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	1b52      	subs	r2, r2, r5
 80053ba:	d41e      	bmi.n	80053fa <_malloc_r+0xc6>
 80053bc:	2a0b      	cmp	r2, #11
 80053be:	d916      	bls.n	80053ee <_malloc_r+0xba>
 80053c0:	1961      	adds	r1, r4, r5
 80053c2:	42a3      	cmp	r3, r4
 80053c4:	6025      	str	r5, [r4, #0]
 80053c6:	bf18      	it	ne
 80053c8:	6059      	strne	r1, [r3, #4]
 80053ca:	6863      	ldr	r3, [r4, #4]
 80053cc:	bf08      	it	eq
 80053ce:	6031      	streq	r1, [r6, #0]
 80053d0:	5162      	str	r2, [r4, r5]
 80053d2:	604b      	str	r3, [r1, #4]
 80053d4:	4638      	mov	r0, r7
 80053d6:	f104 060b 	add.w	r6, r4, #11
 80053da:	f000 f865 	bl	80054a8 <__malloc_unlock>
 80053de:	f026 0607 	bic.w	r6, r6, #7
 80053e2:	1d23      	adds	r3, r4, #4
 80053e4:	1af2      	subs	r2, r6, r3
 80053e6:	d0b6      	beq.n	8005356 <_malloc_r+0x22>
 80053e8:	1b9b      	subs	r3, r3, r6
 80053ea:	50a3      	str	r3, [r4, r2]
 80053ec:	e7b3      	b.n	8005356 <_malloc_r+0x22>
 80053ee:	6862      	ldr	r2, [r4, #4]
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	bf0c      	ite	eq
 80053f4:	6032      	streq	r2, [r6, #0]
 80053f6:	605a      	strne	r2, [r3, #4]
 80053f8:	e7ec      	b.n	80053d4 <_malloc_r+0xa0>
 80053fa:	4623      	mov	r3, r4
 80053fc:	6864      	ldr	r4, [r4, #4]
 80053fe:	e7b2      	b.n	8005366 <_malloc_r+0x32>
 8005400:	4634      	mov	r4, r6
 8005402:	6876      	ldr	r6, [r6, #4]
 8005404:	e7b9      	b.n	800537a <_malloc_r+0x46>
 8005406:	230c      	movs	r3, #12
 8005408:	4638      	mov	r0, r7
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	f000 f84c 	bl	80054a8 <__malloc_unlock>
 8005410:	e7a1      	b.n	8005356 <_malloc_r+0x22>
 8005412:	6025      	str	r5, [r4, #0]
 8005414:	e7de      	b.n	80053d4 <_malloc_r+0xa0>
 8005416:	bf00      	nop
 8005418:	200005e4 	.word	0x200005e4

0800541c <_realloc_r>:
 800541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005420:	4680      	mov	r8, r0
 8005422:	4614      	mov	r4, r2
 8005424:	460e      	mov	r6, r1
 8005426:	b921      	cbnz	r1, 8005432 <_realloc_r+0x16>
 8005428:	4611      	mov	r1, r2
 800542a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	f7ff bf81 	b.w	8005334 <_malloc_r>
 8005432:	b92a      	cbnz	r2, 8005440 <_realloc_r+0x24>
 8005434:	f7ff ff16 	bl	8005264 <_free_r>
 8005438:	4625      	mov	r5, r4
 800543a:	4628      	mov	r0, r5
 800543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005440:	f000 f838 	bl	80054b4 <_malloc_usable_size_r>
 8005444:	4284      	cmp	r4, r0
 8005446:	4607      	mov	r7, r0
 8005448:	d802      	bhi.n	8005450 <_realloc_r+0x34>
 800544a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800544e:	d812      	bhi.n	8005476 <_realloc_r+0x5a>
 8005450:	4621      	mov	r1, r4
 8005452:	4640      	mov	r0, r8
 8005454:	f7ff ff6e 	bl	8005334 <_malloc_r>
 8005458:	4605      	mov	r5, r0
 800545a:	2800      	cmp	r0, #0
 800545c:	d0ed      	beq.n	800543a <_realloc_r+0x1e>
 800545e:	42bc      	cmp	r4, r7
 8005460:	4622      	mov	r2, r4
 8005462:	4631      	mov	r1, r6
 8005464:	bf28      	it	cs
 8005466:	463a      	movcs	r2, r7
 8005468:	f7ff fed4 	bl	8005214 <memcpy>
 800546c:	4631      	mov	r1, r6
 800546e:	4640      	mov	r0, r8
 8005470:	f7ff fef8 	bl	8005264 <_free_r>
 8005474:	e7e1      	b.n	800543a <_realloc_r+0x1e>
 8005476:	4635      	mov	r5, r6
 8005478:	e7df      	b.n	800543a <_realloc_r+0x1e>
	...

0800547c <_sbrk_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	2300      	movs	r3, #0
 8005480:	4d05      	ldr	r5, [pc, #20]	; (8005498 <_sbrk_r+0x1c>)
 8005482:	4604      	mov	r4, r0
 8005484:	4608      	mov	r0, r1
 8005486:	602b      	str	r3, [r5, #0]
 8005488:	f7fc fdde 	bl	8002048 <_sbrk>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_sbrk_r+0x1a>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_sbrk_r+0x1a>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	200005ec 	.word	0x200005ec

0800549c <__malloc_lock>:
 800549c:	4801      	ldr	r0, [pc, #4]	; (80054a4 <__malloc_lock+0x8>)
 800549e:	f000 b811 	b.w	80054c4 <__retarget_lock_acquire_recursive>
 80054a2:	bf00      	nop
 80054a4:	200005f0 	.word	0x200005f0

080054a8 <__malloc_unlock>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__malloc_unlock+0x8>)
 80054aa:	f000 b80c 	b.w	80054c6 <__retarget_lock_release_recursive>
 80054ae:	bf00      	nop
 80054b0:	200005f0 	.word	0x200005f0

080054b4 <_malloc_usable_size_r>:
 80054b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b8:	1f18      	subs	r0, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfbc      	itt	lt
 80054be:	580b      	ldrlt	r3, [r1, r0]
 80054c0:	18c0      	addlt	r0, r0, r3
 80054c2:	4770      	bx	lr

080054c4 <__retarget_lock_acquire_recursive>:
 80054c4:	4770      	bx	lr

080054c6 <__retarget_lock_release_recursive>:
 80054c6:	4770      	bx	lr

080054c8 <_init>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr

080054d4 <_fini>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr
